<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thebesttv&#39;s blog</title>
  
  <subtitle>Think twice, then code once.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thebesttv.github.io/"/>
  <updated>2019-12-17T11:26:13.429Z</updated>
  <id>https://thebesttv.github.io/</id>
  
  <author>
    <name>thebesttv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019 EC-Final 游记</title>
    <link href="https://thebesttv.github.io/2019/12/16/2019-EC-Final/"/>
    <id>https://thebesttv.github.io/2019/12/16/2019-EC-Final/</id>
    <published>2019-12-16T10:44:57.000Z</published>
    <updated>2019-12-17T11:26:13.429Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/12/16/2019-EC-Final/1.png" title="队长的吐槽"><p>翘了四级,跟着 xr 和 lyf 打EC-Final,意外收获了一张铜牌,好高兴呀 XD</p><a id="more"></a><h1 id="Day-∞"><a href="#Day-∞" class="headerlink" title="Day-∞"></a>Day-∞</h1><p>某天在去上工数的路上看到qq上lyf问我有没有兴趣去EC-Final,觉得捡了一个漏,于是就很愉快的答应了.<br>然后发现比赛和四级冲突? … 决定鸽掉四级去西安<del>旅游</del>比赛<br>又发现要自费,而且很贵的样子 :( 然而还是决定去了, 毕竟很好玩呀 :P</p><p>然后就和 lyf 和 xr 组了队,打了淘汰赛,打了四五场模拟赛.<br>发现银川和别的比起来真的好easy呀,进制转换可以用Python黑科技,最大子矩阵可以悬线法 嘿嘿嘿</p><p>慢慢的发现队长 lyf 最擅长的是….举反例! 每次想了一个假算法几乎都被推翻了 XD<br>主代码手的职位游离在 xr 和我之间,然而发现两个人手都不太稳 (结果全队最后差点被我害死…)<br>听说lyf打CF也很擅长FST,经常晚上过了三道然后第二天发现一道都没了</p><p>前段时间本来主要待在图书馆,很少去活动室<br>开始每周去活动室打比赛,也慢慢在集训队变得活跃起来 hh</p><p>期间确(瞎)定(想)了队名: 那怎么办呢(What should we do).<br>来回买的都是12h的硬卧 (现在后悔了…)<br>赵队一开始买的硬座? 全体笑炸 哈哈哈哈<br>听说集训队真有过队硬座坐了一晚上,太狠了</p><p>搞着搞着就到了比赛前,于是就准备准备去了.</p><h1 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h1><p>周四CF上有一场Div3,开局比较快的过了abc,d对了一下拍(然而发现并不需要),最后卡在e上…类似拓扑排序的做法wa了好多次,等到结束都没写出来,枯了<br>第二天改成记忆化搜索终于过了e @_@<br>以为rating又要掉没了</p><p>周五只有体育课,考完了排球,可以心无挂念地去比赛啦 :D</p><p>下午花了好久洗衣服…<br>准备准备行李,纠结了好久要不要穿羽绒服 (后来发现穿了是个巨大的错误 @_@)<br>出宿舍前和wyh愉快背单词(雾<br>然后去图书馆找学姐拿板子(就三张纸…),做了道数学,临走前摸了摸学姐的头求好运 hh<br>又去名苑吃了二两三鲜,然而并没有饱</p><p>说好的五点钟在南大门集合,50分去的时候只有我一人…<br>然后队长喝着可乐来了, 五点整的时候颜神也来了<br>天空中飞过一架飞机 – “哇,是流星,快许愿!” XD<br>等到十多分的时候终于来了两个队,于是就打车去南京站了.</p><p>路上队长各种科普 opera 和 musical 的区别, 窝表示傻傻分不清</p><p>于是就到火车站啦,跟着去了kfc,点了一个红豆派,花了好久才拿到,而且又烫又不好吃…</p><p>到了车上感觉环境还不错,五个人一起挤在队长的下铺, 哈哈哈</p><img src="/2019/12/16/2019-EC-Final/2.jpg" title="哈哈哈哈"><p>学姐看到照片表示看不出队长是女生 @_@</p><p>开出CF发现没有掉分,反而到了1640,好嗨森呀.<br>车上晃荡晃荡看了F的题解,没怎么看懂,花了好久照着题解终于写出来了…</p><p>之后无聊,开始玩起了地狱边境…然后就差不多熄灯了.<br>xr在上铺玩手机,我在…尝试睡着,lyf估计在下铺玩手机</p><p>火车过站的灯光好刺眼, 塞了耳塞在火车和车轨的撞击声和摇摇晃晃中睡着了</p><h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>早上五点醒了,一晚上动也没动,腰酸背疼… 然后侧着身子又睡着了.<br>七点多正式醒了,发现群里xr在找lyf借充电线,然而一个苹果一个安卓对不上… xr晚上一小时醒一次,手机还没电了…</p><p>然后就到啦, 感觉西安还有点冷</p><p>去kfc吃早饭,买了杯豆浆太烫了,然后机智的队长去要了一杯冰块…一杯冰块… 于是顺利地喝完了<br>队长随后也买了杯豆浆,直接把豆浆倒到冰块里…也是佷可以</p><p>乘地铁去巴士点,看到了西工大的志愿者,牌子上写着巴士在100米处,结果走了快五百米才到…<br>到了巴士突然想上厕所,还剩20分钟发车,然后我们一个队都赶回地铁口…<br>还剩8分钟的时候出来,还走错地铁口了…差点没赶上车…</p><p>然后就到了西工大,然觉学校还不错,至少看上去比南理工有钱(划掉)<br>去签到,帮xr填了份问卷拿了一根充电线,九个人的衣服和书包放在一个麻袋里,xr拖到了门口表示拖不动了 hh</p><img src="/2019/12/16/2019-EC-Final/3.jpg" title="工具人"><p>队长表示想要粉书包然而还是没拿</p><p>喵杰帮鱼头签到,于是变成了喵教练 hhhh</p><img src="/2019/12/16/2019-EC-Final/4.jpg" title="喵教练"><p>又走了好久才走到宾馆, 累死了, 队长表示肩周炎又犯了…</p><p>感觉南山苑超豪华,然而好贵呀…<br>放了东西就要吃午饭了,xr表示不想去要睡觉<br>都出来了发现喵杰还在上厕所…于是又回去等了一会才出发</p><p>感觉西工大的食堂还不如我们,而且座位超级拥挤…<br>午饭倒是挺丰盛,直接吃撑了<br>开幕式三点才开始,于是和队长又走回宾馆睡觉(累死<br>进门一片黑,xr已经睡着了…</p><p>2:33 从睡梦中醒来听到队长在疯狂按门铃,开了门发现她一脸阴沉…<br>急急忙忙准备准备就出发看开幕式,然而感觉这个开幕式超级无聊…</p><p>于是就到热身赛了</p><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><p>第一次进到赛场里,有点小激动,看到一个体育馆的电脑,还有好多穿着橘黄色的志愿者</p><p>没想到开始前还有消防演习…太…周到了 (不过那几个示范的志愿者也挺尬的 hhhhh</p><p>说电脑开始了会自动打开,结果直接黑屏了…<br>场上其他队也又不少发生了奇奇怪怪的问题…<br>红衣服的技术小哥跑来跑去都出汗了,表示非常同情他</p><p>黑屏没办法,连A题的HelloWord也写不了…四十分钟后换了台备用机才行<br>于是我们41分钟过了A题 @_@</p><p>过了A题后就一直在B题卡着…最后一共一个气球…<br>B题问了马队,听说要二项式定理,然而最后还是不会 5555</p><p>Anyway 拿到了人生第一个气球,好高兴呀,带着去吃饭,一直带到宾馆里 hh</p><h2 id="羊肉泡馍"><a href="#羊肉泡馍" class="headerlink" title="羊肉泡馍"></a>羊肉泡馍</h2><p>又走了好久才到某个餐馆,点了羊肉泡馍,然而除了羊肉还算能吃,泡馍真的不好吃…<br>期间颜神体验了大蒜,然而还是吐掉了<br>各种玩气球 hh</p><p>回去路上喵杰突然肚子疼(估计是中午被催太急然后就没解决完…),跑到体育馆上厕所,我们就在下边等</p><p>等了好久没等到,一堆人开始怀疑喵杰是不是忘带纸了,然后体育馆又没信号,然后派马神去救他<br>结果马神去了好久也没回来,纷纷怀疑是不是他也没带纸,笑到喘不过气 hhhhhhhhh<br>马神回来了说看到一条队的人在排队,也不知道在干什么,找不到喵杰就回来了 hhhhhhhhh<br>最后喵杰终于回来了</p><p>在体育馆下面笑了好久, 真是一个欢乐的晚上</p><h1 id="Day2-正式赛"><a href="#Day2-正式赛" class="headerlink" title="Day2 正式赛"></a>Day2 正式赛</h1><img src="/2019/12/16/2019-EC-Final/5.jpg" title="第二台电脑"><blockquote><p>超…..刺………激!</p></blockquote><p>吃了一顿还不错的自助就去比赛了<br>在体育馆门口吹了好久的风瑟瑟发抖…</p><p>场内每桌已经放好了三袋午餐,感觉还不错,嘿嘿</p><p>还是有点小紧张的,不过电脑至少没直接黑屏(手动狗头)</p><p>开头他俩看题,我打了一下vim的配置</p><p>A题原来是个签到题,枚举中点然后计算一下就可以了,第一次写忘了乘2…然后一发过了,感觉超自信 hh (虽然罚时是第一名的8倍(捂脸</p><p>然后看M题,花了好久,xr最后想到把n分成多组,每组直接暴力,然后又是我写.</p><p>写了看了一遍过了样例交了结果wa了 5555 超伤心<br>打印了一份, 改了改对了个拍又wa了 55555555</p><p>然后又看了一遍还是没看出问题,紧张起来<br>xr也没看出问题,开始自己再写一遍<br>结果写完电脑死机了! 死机了!</p><p>重启完能用是能用,xr看了一会终于发现问题,少写了一个 <code>if(vis[j])</code> … 瞬间感觉自己是个智障<br>这时突然发现没网了,找了志愿者又没办法,最后再抬来一台新的电脑…<br>最后改了一下第二次交的代码终于过了</p><p>这时候开E,我一开始的想法直接把整个队带偏了…好久都没写出来<br>只有40分钟了…如果过不了肯定得打铁</p><p>xr最后想到把序列拆出来然后双指针贪心,然而我并没有听懂,于是他开始写后面的贪心部分</p><p>可是代码的前半部分还是没有想法…(主要因为被我带偏了…)<br>最后想到可以直接差分后拆序列, 于是我上去写了差分 (我们怎么总是和差分过不去 555)</p><p>两个人写的代码合在一起,各种漏洞,编译都没过…<br>样例没过…</p><p>查了一会发现xr的<code>n</code>是我的<code>len</code>…<br>这时候还有不到十分钟了…<br>改改改,直接让 <code>n=len</code><br>交了一发网页卡了一下,又点了一次,然后就交了两发…<br>刷新了几次都是pending,于是又看代码继续改,把差分数组改成long long</p><p>这时候, 这  时  候!<br>xr刷新了一下发现AC了!!!!<br>他直接拍了一下桌子跳了起来, 把对面西交的队都吓到了 hh</p><p>最后的几分钟三个人就躺在椅子上无所事事了 hhhh</p><h2 id="闭幕式"><a href="#闭幕式" class="headerlink" title="闭幕式"></a>闭幕式</h2><p>闭幕式竟然没有滚榜, 表示很失望…<br>在各种企业宣讲的时候上google商店买了泰拉瑞亚</p><p>anyway 还是拿到了铜牌, 好高兴呀<br>还有赵队铜牌,马队银牌</p><p>感觉北大叠猫猫队的三个女生都好可爱呀<br>清华拿到了顽强拼搏奖也是很可以</p><p>最后出来的时候只剩下一班车了,挤到了,好高兴呀</p><p>回去的晚饭依旧是kfc,我点了个鸡肉饭,好难吃…<br>看来kfc只能卖鸡肉了<br>xr每次都有券可以用,好羡慕~</p><p>西安站的环境不如南京站,走的时候在站台被一堆垃圾恶心到了…</p><p>火车是从拉萨开过来的…环境比较…不怎么友好 @_@</p><p>lyf开了qt的视频半小时没看多少<br>颜神和喵杰玩起了桌游<br>我通关了地狱边境后无所事事,就各种围观…</p><p>感觉上铺还不算太差,至少…睡着啦<br>空调吹出来的是冷风,也是很无奈<br>在床上玩了一会泰拉瑞亚,然而一直死…于是就睡了, 耳边xr和lyf在聊天</p><p>十二点半不知咋的醒了,发现xr和lyf还在侃大山…也是很可以<br>带上耳塞迷迷糊糊又睡了</p><p>最后早上九点钟出了南京站, 算是结束了第一年的ACM生涯 :P<br>(可以报销好高兴呀)<br>(好久没玩游戏啦)</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>emm…这次西工大出了超多锅,比赛过程超刺激<br>坑了队友两次,好无奈啊… 菜是原罪 :(</p><p>anyway 至少第一次去没有打铁, 抱回来了一个铜牌 :P<br>24h的卧铺实在是太…感人了</p><p>最后贴上队名纪念一下 XD</p><img src="/2019/12/16/2019-EC-Final/6.jpg" title="What should we do">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/12/16/2019-EC-Final/1.png&quot; title=&quot;队长的吐槽&quot;&gt;

&lt;p&gt;翘了四级,跟着 xr 和 lyf 打EC-Final,意外收获了一张铜牌,好高兴呀 XD&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://thebesttv.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>EOJ Mothly 2019.11 解题报告</title>
    <link href="https://thebesttv.github.io/2019/11/30/EOJ_Monthly_2019_11_TODO/"/>
    <id>https://thebesttv.github.io/2019/11/30/EOJ_Monthly_2019_11_TODO/</id>
    <published>2019-11-30T11:22:00.000Z</published>
    <updated>2019-11-30T11:54:10.704Z</updated>
    
    <content type="html"><![CDATA[<p>传说中的退队赛……<br>不过组队，运气不错，没有倒数 hh</p><a id="more"></a><h1 id="A-纸条"><a href="#A-纸条" class="headerlink" title="A. 纸条"></a>A. 纸条</h1><p>给定长 $n$, 仅包含 <code>A-Z</code> 和 <code>#</code> 的字符串. 字符串中 <code>#</code> 表示该位置可能的字符, 共 $m$ 个 <code>#</code>. 对每个 <code>#</code>, 有 $k$ 个可能的候选字符. 求第 $x$ 大的字符串.</p><p>和 [UVA 1262] 非常相似. $x$ 从 1 开始, 先减去 1, 改为从 0 开始. 将每组候选字符排序, 然后倒序遍历所有的 <code>#</code>, 对当前该组候选字符, 第 $ x % k $ 个即为所求, 再将 x 除去 k 即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d%lld"</span>,&amp;n,&amp;m,&amp;k,&amp;x);</span><br><span class="line">  --x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">  FOR(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,r[i]);</span><br><span class="line">    sort(r[i],r[i]+k);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> j = m<span class="number">-1</span>;</span><br><span class="line">  ROR(i,n<span class="number">-1</span>,<span class="number">0</span>) <span class="keyword">if</span>(s[i]==<span class="string">'#'</span>)&#123;</span><br><span class="line">    s[i] = r[j--][x%k];</span><br><span class="line">    x /= k;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-字母游戏"><a href="#B-字母游戏" class="headerlink" title="B. 字母游戏"></a>B. 字母游戏</h1><p>定义等价关系: 对字符 a, b , 若两者等价, 表示两字符相等. 若字符串 a, b 等价, 则两字符串长度相等, 且对应位字符等价.<br>现给定 $n$ 个长为 $m$ 的字符串, 每个字符串仅由 <code>abcdefgh</code> 八个小写字母组成. 最多给出 $k$ 个关系, 使得等价字符串<strong>对</strong>最大, 求最大对数.</p><p>划分等价类.<br>首先注意到, 当 k 大于等于7的时候 a-h 全部等价, 答案即为 $C(n,2)$.<br>否则, 8 个字母共可划分出 8-k 个等价类. 等价类的数目即为第二类斯特林数, 最大 $S(8,4)$ 约为1700+. 因此可以dfs枚举等价类. 即: 将字母当作变量, dfs 枚举变量代表的数, 若两变量等价,则代表的数相等.</p><p>dfs枚举后需要求出相等的字符串对个数. 将字符串当作关于变量 a-h 的多项式, 预处理每个变量对应的系数(一开始用8,二的不行…), 就可以在 $O(1)$ 的时间内hash.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1020</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> cntCh = <span class="number">0</span>;</span><br><span class="line">LL vpow[MAX];</span><br><span class="line"><span class="keyword">bool</span> has[<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  LL c[<span class="number">8</span>];</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    FOR(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">      c[s[i]-<span class="string">'a'</span>] += vpow[i];</span><br><span class="line">      has[s[i]-<span class="string">'a'</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">LL <span class="title">f</span><span class="params">(<span class="keyword">int</span> *r)</span></span>&#123;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    FOR(i,<span class="number">0</span>,<span class="number">8</span>) sum += c[i] * r[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;node[MAX];</span><br><span class="line"><span class="keyword">char</span> s[MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ansMax = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">8</span>]; LL val[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FOR(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">    val[i] = node[i].f(r);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(val,val+n);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">  FOR(i,<span class="number">0</span>,n) <span class="built_in">printf</span>(<span class="string">"  hash: %d\n"</span>,val[i]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  VR&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    <span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n &amp;&amp; val[j]==val[i]) ++j;</span><br><span class="line">    <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>) v.push_back(j-i);</span><br><span class="line">    i = j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x : v) ans += x * (x<span class="number">-1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 等价类数目不足</span></span><br><span class="line">  <span class="keyword">if</span>(cnt + <span class="number">8</span> - cur &lt; cntCh - k) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(cur==<span class="number">8</span>)&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"dfs:"</span>);</span><br><span class="line">    FOR(i,<span class="number">0</span>,<span class="number">8</span>) <span class="keyword">if</span>(has[i]) <span class="built_in">printf</span>(<span class="string">" %d"</span>,r[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(cnt == cntCh - k)</span><br><span class="line">      ansMax = max(ansMax, cal());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!has[cur])&#123;</span><br><span class="line">    dfs(cur+<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FORR(i,<span class="number">1</span>,cnt)&#123;</span><br><span class="line">    r[cur] = i;</span><br><span class="line">    dfs(cur+<span class="number">1</span>,cnt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt &lt; cntCh-k)&#123;</span><br><span class="line">    r[cur] = cnt+<span class="number">1</span>;</span><br><span class="line">    dfs(cur+<span class="number">1</span>,cnt+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  vpow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  FORR(i,<span class="number">1</span>,<span class="number">1000</span>) vpow[i] = <span class="number">13</span> * vpow[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">  FOR(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s); node[i].cal(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FOR(i,<span class="number">0</span>,<span class="number">8</span>) <span class="keyword">if</span>(has[i]) ++cntCh;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"has: "</span>);</span><br><span class="line">  FOR(i,<span class="number">0</span>,<span class="number">8</span>) <span class="keyword">if</span>(has[i]) <span class="built_in">printf</span>(<span class="string">"%c"</span>,i+<span class="string">'a'</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span>(k &gt;= cntCh<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n*(n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ansMax);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传说中的退队赛……&lt;br&gt;不过组队，运气不错，没有倒数 hh&lt;/p&gt;
    
    </summary>
    
    
      <category term="解题报告" scheme="https://thebesttv.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[CF #600 Div.2]</title>
    <link href="https://thebesttv.github.io/2019/11/20/CF_1253/"/>
    <id>https://thebesttv.github.io/2019/11/20/CF_1253/</id>
    <published>2019-11-19T16:00:00.000Z</published>
    <updated>2019-11-20T16:11:52.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-Silly-Mistake"><a href="#B-Silly-Mistake" class="headerlink" title="B Silly Mistake"></a>B Silly Mistake</h1><p>贪心：每当办公室为空即开始新的一天。（天数最少）<br>不能贪心天数最大，不然下面的数据就不对了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 -1 2 1 -1 -2</span><br></pre></td></tr></table></figure><p>代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;B-Silly-Mistake&quot;&gt;&lt;a href=&quot;#B-Silly-Mistake&quot; class=&quot;headerlink&quot; title=&quot;B Silly Mistake&quot;&gt;&lt;/a&gt;B Silly Mistake&lt;/h1&gt;&lt;p&gt;贪心：每当办公室为空即开始新的一天。
      
    
    </summary>
    
    
      <category term="CF" scheme="https://thebesttv.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>[Vijos 1404]  遭遇战</title>
    <link href="https://thebesttv.github.io/2019/11/08/Vijos_1404_%E9%81%AD%E9%81%87%E6%88%98/"/>
    <id>https://thebesttv.github.io/2019/11/08/Vijos_1404_遭遇战/</id>
    <published>2019-11-08T08:13:00.000Z</published>
    <updated>2019-11-08T08:20:23.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定区间 [s,t] ，n条线段，每条覆盖 [li,ri] 的区间，价格为 wi。求覆盖整个[s,t]的最少代价。</p><a id="more"></a><h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><p>挺不错的题，没仔细想，给Wa了两发……</p><p>可以将每个座标作为节点，如果覆盖了 [l,r] ，则建立一条 l -&gt; r+1 的边，长度为w。转化为求 s 到 t+1 的最短路。</p><p>但这样如果出现 [1,3], [2,4], [5,5] 将无法覆盖 [1,5]，因此要建立所有 i -&gt; i-1 长为0的边。</p><p>但这样，[1,6] 又无法覆盖 [1,5] ，因此能只检查 d[t+1] ，要检查所有 i&gt;t 的最短路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">90020</span>, MAXM = <span class="number">10020</span> + MAXN;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,s,t,d[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> v,w; Edge *next;</span><br><span class="line">&#125;edge[MAXM], *head[MAXN];</span><br><span class="line"><span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">  edge[tail]=Edge&#123;v,w,head[u]&#125;;</span><br><span class="line">  head[u]=edge + (tail++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> d,u;</span><br><span class="line">  Node(<span class="keyword">int</span> d, <span class="keyword">int</span> u): d(d), u(u) &#123; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d &gt; b.d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">PQ&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  MST(d,<span class="number">0x3f</span>); d[s]=<span class="number">0</span>;</span><br><span class="line">  q.push(Node(<span class="number">0</span>,s));</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    Node t=q.top(); q.pop();</span><br><span class="line">    <span class="keyword">if</span>(t.d!=d[t.u]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> u=t.u;</span><br><span class="line">    <span class="keyword">for</span>(Edge *e=head[u];e;e=e-&gt;next)&#123;</span><br><span class="line">      <span class="keyword">if</span>(d[e-&gt;v] &gt; d[u] + e-&gt;w)&#123;</span><br><span class="line">        d[e-&gt;v] = d[u] + e-&gt;w;</span><br><span class="line">        q.push(Node(d[e-&gt;v], e-&gt;v));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;t);</span><br><span class="line">  FOR(i,s+<span class="number">1</span>,t) addEdge(i,i<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> timeMax=t;</span><br><span class="line">  <span class="keyword">int</span> l,r,w;</span><br><span class="line">  <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;w);</span><br><span class="line">    addEdge(l,r+<span class="number">1</span>,w);</span><br><span class="line">    timeMax=max(timeMax,r);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Dij(s);</span><br><span class="line">  <span class="keyword">int</span> ansMin=INF;</span><br><span class="line">  FORR(i,t+<span class="number">1</span>,timeMax+<span class="number">1</span>)</span><br><span class="line">    ansMin=min(ansMin,d[i]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ansMin&lt;INF ? ansMin : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定区间 [s,t] ，n条线段，每条覆盖 [li,ri] 的区间，价格为 wi。求覆盖整个[s,t]的最少代价。&lt;/p&gt;
    
    </summary>
    
    
      <category term="最短路" scheme="https://thebesttv.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSDUT 尺取、二分、三分</title>
    <link href="https://thebesttv.github.io/2019/10/28/SSDUT_%E4%BA%8C%E5%88%86%E3%80%81%E4%B8%89%E5%88%86%E3%80%81%E5%B0%BA%E5%8F%96/"/>
    <id>https://thebesttv.github.io/2019/10/28/SSDUT_二分、三分、尺取/</id>
    <published>2019-10-27T16:00:00.000Z</published>
    <updated>2019-10-28T03:52:59.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-CF1156C-Match-Points"><a href="#I-CF1156C-Match-Points" class="headerlink" title="I [CF1156C] Match Points"></a>I [CF1156C] Match Points</h1><p>给定一串序列 ${x_n}$, 选出最多的有序对 $(x_i, x_j)$ 使得 $|x_j - x_i| \le z$</p><p>贪心 + 尺取 / 贪心 + 二分</p><p>令有序对中较小的为 L，较大的为 R，可以发现，若存在 Rj &lt; Li，则交换他们不会使答案更劣。若存在 R 小于某个未配对的数，则交换他们亦不会更劣；存在 L 大于某个未配对的数，也可交换。</p><p>因此，R不小于所有的L，L不大于任意R，即将数列排序后，取前 k 小和后 k 大的一一配对即可。</p><p>可以尺取，直接将数列分成两份，从中间开始取；也可二分答案，对每个 k 判断是否合法。</p><p>尺取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">2e5</span> + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,z,a[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;z);</span><br><span class="line">  FOR(i,<span class="number">0</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">  sort(a,a+n);</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">  FOR(j,(n+<span class="number">1</span>)/<span class="number">2</span>,n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[j]-a[i]&gt;=z)&#123;</span><br><span class="line">      ++ans, ++i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">2e5</span> + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,z,a[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s = n-k;</span><br><span class="line">  FOR(i,<span class="number">0</span>,k) <span class="keyword">if</span>(a[i+s] - a[i] &lt; z)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;z);</span><br><span class="line">  FOR(i,<span class="number">0</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">  sort(a,a+n);</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>, r = n/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(ok(m))&#123;</span><br><span class="line">      l = m;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      r = m<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;I-CF1156C-Match-Points&quot;&gt;&lt;a href=&quot;#I-CF1156C-Match-Points&quot; class=&quot;headerlink&quot; title=&quot;I [CF1156C] Match Points&quot;&gt;&lt;/a&gt;I [CF1156C] Match 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 3 Hints</title>
    <link href="https://thebesttv.github.io/2019/10/24/PTA-day3/"/>
    <id>https://thebesttv.github.io/2019/10/24/PTA-day3/</id>
    <published>2019-10-23T16:00:00.000Z</published>
    <updated>2019-10-24T09:01:32.412Z</updated>
    
    <content type="html"><![CDATA[<p>减少一点工作量……</p><a id="more"></a><p>仿佛有不少人不知道题意……题目只要求我们实现那几个特定的函数，只要提交函数定义即可，不用 main 函数等</p><p>有几道题没有采用内置类型，而是改为 ElementType ，此时要注意函数内所有有关变量都用它来定义</p><h1 id="养成良好的码风"><a href="#养成良好的码风" class="headerlink" title="养成良好的码风"></a>养成良好的码风</h1><p>至少要不太难看……</p><p><a href="https://blog.csdn.net/voidccc/article/details/37599203" target="_blank" rel="noopener">一张图总结Google C++编程规范</a></p><h1 id="查错的方法"><a href="#查错的方法" class="headerlink" title="查错的方法"></a>查错的方法</h1><p><a href="https://www.zhihu.com/question/28408193" target="_blank" rel="noopener">ACM程序怎么调试？</a></p><ol><li>输出中间变量</li><li>人肉运行</li></ol><p>关于格式错误：<br><strong>仔细读题，寻找自己输出与样例输出的区别</strong><br>注意行首、行末空格，有时候还要关注换行符、空行等</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>递归，注意边界条件（即当 n 为0/1时停止递归）</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>分子分母出现的数从小到大为 1, 1, 2, 3, 5, 8，即为 Fibonacci 数。<br>递推前 n 个 Fibonacci 数存到数组里，再计算即可</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>要注意题目，<strong>fabs(最后一项)&lt;e</strong>，最后一项还是要包含在 cos 的值里的<br>不必每次傻傻的乘 n 个 x 来算通项，再从1开始算n的阶乘。可以看出每一项都是前一项乘两个x，除(n-1)*n</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>自行查阅如何进行进制转换以及反转数组</p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p>有点可怕的题目…… n 会很大，因此可以使用 qsort 函数，具体实现自行查找<br>最简单的想法：将数列排序，直接返回中位数即可</p><p>提示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 自行定义的 cmp 函数，用于qsort</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Median</span><span class="params">( ElementType A[], <span class="keyword">int</span> N )</span></span>&#123;</span><br><span class="line">  <span class="comment">// 先排序，后返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12"><a href="#12" class="headerlink" title="12"></a>12</h1><p>最后一个点可以放弃……</p><p>n 会很大，就算 long long unsigned 也会溢出</p><p>可以自行实现大整数</p><h1 id="17"><a href="#17" class="headerlink" title="17"></a>17</h1><p>源代码 scanf 的双引号变成全角的了，很迷 @_@ ，编译时要改掉</p><p>计算多项式的时候可以傻傻的每次用 x 的 i 次方，但可以采用秦九韶算法，减少乘法的次数</p><p>秦九韶示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> a[], <span class="keyword">double</span> x )</span></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    ans = ans * x + a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;减少一点工作量……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最小生成树学习笔记</title>
    <link href="https://thebesttv.github.io/2019/10/18/mst/"/>
    <id>https://thebesttv.github.io/2019/10/18/mst/</id>
    <published>2019-10-17T16:00:00.000Z</published>
    <updated>2019-10-20T07:06:54.655Z</updated>
    
    <content type="html"><![CDATA[<p>在大学第一个学的是MST, hh</p><a id="more"></a><p>最小生成树: 给定一个 n 个节点的连通图 G ,求 G 的生成树,使其权值和最小</p><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><p>并查集+贪心</p><p>一开始,所有点都互不连通.<br>对边按权值递增排序,对每条边e=(u,v),若 u, v 处于不同的连通块,则将 e 加入生成树中. 当加入 n-1 条边即可停止.</p><p>[洛谷 3366]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> u,v,w;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p[x]&lt;<span class="number">0</span> ? x : p[x]=fa(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">  FOR(i,<span class="number">0</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</span><br><span class="line">  sort(edge,edge+m);</span><br><span class="line"></span><br><span class="line">  MST(p,<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">  FOR(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">    Edge &amp;e=edge[i];</span><br><span class="line">    <span class="keyword">int</span> x1=fa(e.u), x2=fa(e.v);</span><br><span class="line">    <span class="keyword">if</span>(x1!=x2)&#123;</span><br><span class="line">      p[x1]=x2; ans+=e.w;</span><br><span class="line">      <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"orz\n"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><p>维护一个数组 d, d[i] 表示连到 i 节点的最小代价. vis[i] 表示 i 是否已在生成树中. 一开始任选 d[i] 为 0 ,其余设为正无穷.</p><p>n 次循环,每次选取不在生成树中的 d 最小的 u 加入生成树,然后对 u 出发的每条边(u,v),如果 v 也不在生成树中,则试图更新 d[v]</p><p>优先队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN],tail=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> v,w,next;</span><br><span class="line">  Edge() &#123; &#125;</span><br><span class="line">  Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> next): v(v), w(w), next(next) &#123; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;edge[MAXM*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">  edge[tail]=Edge(v,w,head[u]); head[u]=tail++;</span><br><span class="line">  edge[tail]=Edge(u,w,head[v]); head[v]=tail++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> u,d;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d &gt; b.d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">PQ&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">  <span class="keyword">int</span> u,v,w;</span><br><span class="line">  FOR(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    addEdge(u,v,w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MST(d,<span class="number">0x3f</span>); d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  q.push(Node&#123;<span class="number">1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty() &amp;&amp; cnt&lt;n)&#123;</span><br><span class="line">    Node t=q.top(); q.pop();</span><br><span class="line">    <span class="keyword">int</span> u=t.u;</span><br><span class="line">    <span class="keyword">if</span>(d[u]!=t.d) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">//或 if(vis[u]) continue;</span></span><br><span class="line">    ans+=t.d; ++cnt; vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">      <span class="keyword">int</span> v=edge[i].v,w=edge[i].w;</span><br><span class="line">      <span class="keyword">if</span>(!vis[v] &amp;&amp; d[v]&gt;w)&#123;</span><br><span class="line">        d[v]=w; q.push(Node&#123;v,w&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt&lt;n) <span class="built_in">printf</span>(<span class="string">"orz\n"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接矩阵</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXN],tail=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> v,w,next;</span><br><span class="line">  Edge() &#123; &#125;</span><br><span class="line">  Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> next): v(v), w(w), next(next) &#123; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;edge[MAXM*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">  edge[tail]=Edge(v,w,head[u]); head[u]=tail++;</span><br><span class="line">  edge[tail]=Edge(u,w,head[v]); head[v]=tail++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">  <span class="keyword">int</span> u,v,w;</span><br><span class="line">  FOR(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    addEdge(u,v,w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MST(d,<span class="number">0x3f</span>); d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> ans=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">  FOR(k,<span class="number">0</span>,n)&#123;</span><br><span class="line">    <span class="keyword">int</span> tMin=INF,u=<span class="number">-1</span>;</span><br><span class="line">    FORR(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!vis[i] &amp;&amp; d[i]&lt;tMin)&#123;</span><br><span class="line">      tMin=d[i], u=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tMin==INF) <span class="keyword">break</span>;</span><br><span class="line">    ans+=d[u]; vis[u]=<span class="number">1</span>; ++cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">      <span class="keyword">int</span> v=edge[i].v, w=edge[i].w;</span><br><span class="line">      <span class="keyword">if</span>(!vis[v] &amp;&amp; d[v]&gt;w) d[v]=w;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt&lt;n) <span class="built_in">printf</span>(<span class="string">"orz\n"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="裸题"><a href="#裸题" class="headerlink" title="裸题"></a>裸题</h2><p>[洛谷 3366]<br>[Vijos 1190]<br>[HDU 1863]<br>[HDU 1875]</p><h2 id="HDU-1879-继续畅通工程"><a href="#HDU-1879-继续畅通工程" class="headerlink" title="[HDU 1879] 继续畅通工程"></a>[HDU 1879] 继续畅通工程</h2><p>部分已经连接的图的MST</p><h2 id="Vijos-1579-宿命的PSS"><a href="#Vijos-1579-宿命的PSS" class="headerlink" title="[Vijos 1579] 宿命的PSS"></a>[Vijos 1579] 宿命的PSS</h2><p>Kruskal 的逆过程</p><p>感觉是MST一道超棒的题 XD</p><h2 id="Vijos-1422-教主的难题"><a href="#Vijos-1422-教主的难题" class="headerlink" title="[Vijos 1422] 教主的难题"></a>[Vijos 1422] 教主的难题</h2><p>先BFS找出所有可能的数(不考虑缺少的边),然后对每个数字,在此枚举生成的数,此时连边.<br>因为要加入一开始所有的数,所以要<strong>先把所有数连上权为0的边</strong>.</p><h2 id="POJ-1789-Truck-History"><a href="#POJ-1789-Truck-History" class="headerlink" title="[POJ 1789] Truck History"></a>[POJ 1789] Truck History</h2><p>给定一个 n 个节点的完全图,求最小生成树.</p><p>一开始把 $t_0$ 当成根,拿最短路做 @_@ 好无奈啊…</p><p>看人家大佬的代码学到了 <code>make_heap</code>, 好欢乐啊 :P</p><img src="/2019/10/18/mst/1.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大学第一个学的是MST, hh&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="https://thebesttv.github.io/tags/Notes/"/>
    
      <category term="最小生成树" scheme="https://thebesttv.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[Vijos 1579] 宿命的PSS</title>
    <link href="https://thebesttv.github.io/2019/10/16/Vijos_1579/"/>
    <id>https://thebesttv.github.io/2019/10/16/Vijos_1579/</id>
    <published>2019-10-15T16:00:00.000Z</published>
    <updated>2019-10-16T10:34:41.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定 n 个节点的最小生成树,求它的最小完全图.</p><a id="more"></a><h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><p>回忆 Kruskal 的过程: 对边,按边权从小到大遍历,如果边 e 的两个端点 u, v处于不同的连通块中则加入最小生成树中.可以发现,每当e被加入,则 u 和 v 所处的两个连通块的其他所有边都被抛弃.那么依据最小生成树,通过 Kruskal 的逆过程既能恢复出最小完全图.</p><p>将 n-1 条边从小到大遍历,对每个 u, v 以及他们所处的联通块 A,B, |A|*|B|-1 即为被抛弃的边的个数.因为所求最小,取 e.w + 1 作为新的边权既可.</p><p>一开始被样例迷惑了 @_@,以为加上去的联通块大小都是1, 结果0分…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">20020</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> u,v,w;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">VR&lt;Edge&gt; edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p[x]&lt;<span class="number">0</span> ? x : p[x]=fa(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">  x=fa(x), y=fa(y);</span><br><span class="line">  <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">    p[y]+=p[x]; p[x]=y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  MST(p,<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">  <span class="keyword">int</span> u,v,w;</span><br><span class="line">  FOR(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    edge.push_back(Edge&#123;u,v,w&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(ALL(edge));</span><br><span class="line">  LL ans=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(Edge e : edge)&#123;</span><br><span class="line">    <span class="keyword">int</span> x=fa(e.u), y=fa(e.v);</span><br><span class="line">    ans += e.w;</span><br><span class="line">    ans += (e.w+<span class="number">1l</span>l) * (p[x]*p[y] - <span class="number">1l</span>l);</span><br><span class="line">    merge(x,y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定 n 个节点的最小生成树,求它的最小完全图.&lt;/p&gt;
    
    </summary>
    
    
      <category term="最小生成树" scheme="https://thebesttv.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal" scheme="https://thebesttv.github.io/tags/Kruskal/"/>
    
  </entry>
  
  <entry>
    <title>贪心合集</title>
    <link href="https://thebesttv.github.io/2019/10/12/Greedy_collection/"/>
    <id>https://thebesttv.github.io/2019/10/12/Greedy_collection/</id>
    <published>2019-10-11T16:00:00.000Z</published>
    <updated>2019-10-12T13:21:26.945Z</updated>
    
    <content type="html"><![CDATA[<p>靠着翔做了做大连理工的贪心合集,感觉有点会贪心了 XD</p><p>[CF 1238B] Kill ‘Em All<br>二分导弹个数[1:n],贪心地发射导弹,判断是否全部击杀.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;靠着翔做了做大连理工的贪心合集,感觉有点会贪心了 XD&lt;/p&gt;
&lt;p&gt;[CF 1238B] Kill ‘Em All&lt;br&gt;二分导弹个数[1:n],贪心地发射导弹,判断是否全部击杀.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="贪心" scheme="https://thebesttv.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>[CF 1234] 解题报告</title>
    <link href="https://thebesttv.github.io/2019/10/02/CF_1234/"/>
    <id>https://thebesttv.github.io/2019/10/02/CF_1234/</id>
    <published>2019-10-01T16:00:00.000Z</published>
    <updated>2019-10-02T03:34:42.573Z</updated>
    
    <content type="html"><![CDATA[<p>第一次打 Div. 3 ，的确比 2 简单了不少 XD</p><a id="more"></a><h1 id="A-Equalize-Prices-Again"><a href="#A-Equalize-Prices-Again" class="headerlink" title="A: Equalize Prices Again"></a>A: Equalize Prices Again</h1><p>直接输出 $ \lceil sum / n \rceil $ 即可。</p><h1 id="B-Social-Network"><a href="#B-Social-Network" class="headerlink" title="B: Social Network"></a>B: Social Network</h1><p>模拟，用队列+map即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,q[MAX],head,tail;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line">  FOR(i,<span class="number">0</span>,n)&#123; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</span><br><span class="line">    <span class="keyword">if</span>(mp.count(id) &amp;&amp; mp[id]) <span class="keyword">continue</span>;  <span class="comment">// already have id</span></span><br><span class="line">    <span class="keyword">if</span>(tail - head &lt; k)&#123;  <span class="comment">// not full</span></span><br><span class="line">      q[tail++] = id; mp[id]=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      mp[q[head++]]=<span class="number">0</span>; q[tail++]=id; mp[id]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tail-head);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>,q[tail<span class="number">-1</span>]);</span><br><span class="line">  <span class="keyword">if</span>(tail-head&gt;=<span class="number">2</span>) ROR(k,tail<span class="number">-2</span>,head)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d"</span>,q[k]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Pipes"><a href="#C-Pipes" class="headerlink" title="C: Pipes"></a>C: Pipes</h1><p>一开始把它想复杂了，看了别人的代码才发现好简单……<br>从(0,0)开始，尝试走到(1,n)。如果当前为1,2，则只能向右。如果当前为3-6，则走到另一行(x^1)，且那个的种类也为3-6。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">200020</span>;</span><br><span class="line"><span class="keyword">int</span> n; <span class="keyword">char</span> s[<span class="number">2</span>][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>, y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(y&lt;n)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[x][y]&gt;=<span class="string">'3'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[x^<span class="number">1</span>][y]&lt;=<span class="string">'2'</span>) <span class="keyword">break</span>;</span><br><span class="line">        x^=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, x==<span class="number">1</span> &amp;&amp; y==n ? <span class="string">"YES"</span> : <span class="string">"NO"</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Distinct-Characters-Queries"><a href="#D-Distinct-Characters-Queries" class="headerlink" title="D: Distinct Characters Queries"></a>D: Distinct Characters Queries</h1><p>没想到只要用set就行了……亏我还上了线段树……<br>过段时间得好好学学STL了 XD</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">100020</span>;</span><br><span class="line"><span class="keyword">int</span> n,q; <span class="keyword">char</span> s[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SetTree</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> node[MAX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    node[u] = node[u&lt;&lt;<span class="number">1</span>] | node[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> cl, <span class="keyword">int</span> cr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cl==cr)&#123;</span><br><span class="line">      node[u]=<span class="number">1</span>&lt;&lt;(s[cl]-<span class="string">'a'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">int</span> m=(cl+cr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">      build(u&lt;&lt;<span class="number">1</span>,cl,m);</span><br><span class="line">      build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,m+<span class="number">1</span>,cr);</span><br><span class="line">      pushUp(u);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> cl, <span class="keyword">int</span> cr, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=cl &amp;&amp; cr&lt;=qr)&#123;</span><br><span class="line">      node[u] = v;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">int</span> m=(cl+cr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(ql&lt;=m) <span class="built_in">set</span>(u&lt;&lt;<span class="number">1</span>,cl,m,ql,qr,v);</span><br><span class="line">      <span class="keyword">if</span>(m&lt;qr) <span class="built_in">set</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,m+<span class="number">1</span>,cr,ql,qr,v);</span><br><span class="line">      pushUp(u);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> cl, <span class="keyword">int</span> cr, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=cl &amp;&amp; cr&lt;=qr)&#123;</span><br><span class="line">      <span class="keyword">return</span> node[u];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">int</span> m=(cl+cr)&gt;&gt;<span class="number">1</span>; <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(ql&lt;=m) ans=sum(u&lt;&lt;<span class="number">1</span>,cl,m,ql,qr);</span><br><span class="line">      <span class="keyword">if</span>(m&lt;qr) ans|=sum(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,m+<span class="number">1</span>,cr,ql,qr);</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;sg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,s+<span class="number">1</span>,&amp;q);</span><br><span class="line">  n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">  sg.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> op,pos,l,r,ch;</span><br><span class="line">  <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">      <span class="keyword">do</span> ch=getchar(); <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(ch));</span><br><span class="line">      sg.<span class="built_in">set</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos,pos, <span class="number">1</span>&lt;&lt;(ch-<span class="string">'a'</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">      <span class="keyword">int</span> sum = sg.sum(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">      <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(sum)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&amp;<span class="number">1</span>) cnt++;</span><br><span class="line">        sum&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E:"></a>E:</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次打 Div. 3 ，的确比 2 简单了不少 XD&lt;/p&gt;
    
    </summary>
    
    
      <category term="CF" scheme="https://thebesttv.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>[CF 1228] 解题报告</title>
    <link href="https://thebesttv.github.io/2019/10/01/CF_1228/"/>
    <id>https://thebesttv.github.io/2019/10/01/CF_1228/</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2019-10-01T06:11:07.983Z</updated>
    
    <content type="html"><![CDATA[<p>这算是第一次正式打CF吧，然而只过了两题……然而排名还是上去了一点……</p><a id="more"></a><h1 id="A-Distinct-Digits"><a href="#A-Distinct-Digits" class="headerlink" title="A: Distinct Digits"></a>A: Distinct Digits</h1><h1 id="B-Filling-the-Grid"><a href="#B-Filling-the-Grid" class="headerlink" title="B: Filling the Grid"></a>B: Filling the Grid</h1><h1 id="C-Primes-and-Multiplication"><a href="#C-Primes-and-Multiplication" class="headerlink" title="C: Primes and Multiplication"></a>C: Primes and Multiplication</h1><p>大意：令 $prime(x)$ 表示 $x$ 的质因数集合，$g(x,p) = \max\{ p^k \}, 其中 p^k | x $，$ f(x,y) = \prod_{p\in prime(x)} g(y,p)$。求 $ans(x,n) = \prod_{i=1}^n f(x,i)$ 。$ x \leq 10^9, n \leq 10^{18} $</p><p>首先将 x 质因数分解，枚举 $i = 1 : \sqrt{n}$，分别判断 i 和 n/i 是否为质数并加入 prime 数组。<br>题目原意是把 1:n 每个数在 prime 中的_幂最大约数_相乘，若枚举 n 的话需要 $O(n)$ 的复杂度，无法承受。转为枚举 prime 中的每个质数 p 。对每个 p ，枚举不大于 n 的所有 $p^k$ 。对每个 $p^k$ ，令 m 表示 1:n 中所有以 $p^k$ 为 k 最大的约数的个数，m 即为 1:n 中 $p^k$ 的倍数个数减去 $p^{k+1}$ 的倍数个数，即 $ m = \lfloor n / p^k \rfloor - \lfloor n / p^{k+1} \rfloor$ 。则 ans 乘上 $ (p^k)^m $ 即可。</p><p>注意，n 最大为 1e18 ，此时如果 p 取到 1e8 左右，可能会爆 long long ，要注意细节处理，把乘法改为除法。</p><p>交了好几次，都因为爆LL没过，后来改成python一遍过 XD</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LLU MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> x; LLU n;</span><br><span class="line">VR&lt;LLU&gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(!(n&amp;<span class="number">1</span>)) <span class="keyword">return</span> n==<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> r = <span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=r;i+=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LLU <span class="title">pow</span><span class="params">(LLU x, LLU y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(y==<span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">  LLU t = <span class="built_in">pow</span>(x,y&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  t = t * t % MOD;</span><br><span class="line">  <span class="keyword">if</span>(y&amp;<span class="number">1</span>) t = t * x % MOD;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%llu"</span>,&amp;x,&amp;n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> r = <span class="built_in">sqrt</span>(x+<span class="number">0.5</span>);</span><br><span class="line">  FORR(i,<span class="number">1</span>,r) <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrime(i)) prime.push_back(i);</span><br><span class="line">    <span class="keyword">if</span>(i*i!=x &amp;&amp; isPrime(x/i)) prime.push_back(x/i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  LLU ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(LLU p : prime)&#123;</span><br><span class="line">    LLU pk = p;</span><br><span class="line">    <span class="keyword">while</span>(pk &lt;= n)&#123;</span><br><span class="line">      LLU m = n/pk - n/pk/p;  <span class="comment">// &lt;b&gt; n/pk/p &lt;/b&gt;</span></span><br><span class="line">      ans = ans * <span class="built_in">pow</span>(pk%MOD,m) % MOD;</span><br><span class="line">      <span class="comment">//if(1.0*pk*p &gt; 1.0*n) break; // double 精度不行</span></span><br><span class="line">      <span class="keyword">if</span>(pk &gt; n/p) <span class="keyword">break</span>; <span class="comment">// 把 pk*p &gt; n 改成 pk &gt; n/p 防止溢出</span></span><br><span class="line">      pk *= p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#<br>#</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这算是第一次正式打CF吧，然而只过了两题……然而排名还是上去了一点……&lt;/p&gt;
    
    </summary>
    
    
      <category term="CF" scheme="https://thebesttv.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记</title>
    <link href="https://thebesttv.github.io/2019/09/22/data_structure_notes/"/>
    <id>https://thebesttv.github.io/2019/09/22/data_structure_notes/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2019-09-22T06:18:11.664Z</updated>
    
    <content type="html"><![CDATA[<p>Emm, 就是记录一下一些小技巧之类的。</p><a id="more"></a><h1 id="多项式计算-秦九韶算法"><a href="#多项式计算-秦九韶算法" class="headerlink" title="多项式计算 秦九韶算法"></a>多项式计算 秦九韶算法</h1><p>将多项式的计算<br>$$ f(x) = a_0 + a_1 x + a_2 x^2 + \cdots + a_n x^n$$<br>转化为<br>$$ f(x) = a_0 + x (a_1 + x( a_2 + x ( \cdots + x(a_n))))$$</p><p>可将乘法次数从 $O(n^2)$ 降低到 $O(n)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> ans = a[n];</span><br><span class="line">  ROR(i,n<span class="number">-1</span>,<span class="number">0</span>) ans = a[i] + ans*x;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emm, 就是记录一下一些小技巧之类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://thebesttv.github.io/tags/notes/"/>
    
      <category term="数据结构" scheme="https://thebesttv.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>[Vijos 1488] 路灯的改建计划</title>
    <link href="https://thebesttv.github.io/2019/09/21/Vijos_1488_%E8%B7%AF%E7%81%AF%E7%9A%84%E6%94%B9%E5%BB%BA%E8%AE%A1%E5%88%92/"/>
    <id>https://thebesttv.github.io/2019/09/21/Vijos_1488_路灯的改建计划/</id>
    <published>2019-09-20T16:00:00.000Z</published>
    <updated>2019-09-21T05:47:53.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一排 n 个路灯，将其分成 m 组，使得总亮度最大。每个路灯有功率 a 和照度 z 两个属性；每组打开的灯功率之和不大于 <code>t * 该组路灯数量(包括灭的)</code> 。</p><a id="more"></a><h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><p>使用两次DP。令 。令 f[i][j] 表示 1:i 的路灯分成 j 组，最大的照度，则 f[i][j] = max{ f[k][j-1] + g[k+1][i] | j-1&lt;=k&lt;i }，其中 g[i][j] (i&lt;=j) 表示将 i:j 的路灯分为一组时最大的照度。求解 g 时，令 h[i][j] 表示前 i 个路灯，功率不大于 j 时的最大照度，则 h[i][j] = max{ h[i-1][j], h[i-1][j-a[i]]+z[i] }。然后就可以<del>欢乐地</del>DP啦！</p><p>但要注意求解 g 时，只能进行 n 次DP，即对每个 i ，计算出 h[i:n][0:max] 的值，否则会T。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const int MAXN=180,MAXM=60;</span><br><span class="line">int n,m,t,a[MAXN],z[MAXN];</span><br><span class="line">int f[MAXN][MAXM];  // f[i][j]: 1:i，组成 j ，最大的照度</span><br><span class="line">int g[MAXN][MAXN];  // g[i][j]: i:j 为一组，最大照度</span><br><span class="line">int h[50*MAXN];</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">  scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;t);</span><br><span class="line">  FORR(i,1,n) scanf(&quot;%d%d&quot;,&amp;a[i],&amp;z[i]);</span><br><span class="line"></span><br><span class="line">  FORR(i,1,n)&#123;  // n次DP</span><br><span class="line">    MST(h,0); int lim=(n-i+1)*t;  // 最大的功率限制</span><br><span class="line">    FORR(j,i,n)&#123;</span><br><span class="line">      if(a[j]&lt;=lim) ROR(k,lim,a[j])</span><br><span class="line">        h[k] = max(h[k], h[k-a[j]]+z[j]);</span><br><span class="line">      g[i][j] = h[(j-i+1)*t];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FORR(i,1,n) FORR(j,1,min(i,m)) FOR(k,j-1,i)&#123;</span><br><span class="line">    f[i][j] = max(f[i][j], f[k][j-1] + g[k+1][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;%d\n&quot;,f[n][m]);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一排 n 个路灯，将其分成 m 组，使得总亮度最大。每个路灯有功率 a 和照度 z 两个属性；每组打开的灯功率之和不大于 &lt;code&gt;t * 该组路灯数量(包括灭的)&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DP" scheme="https://thebesttv.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[UVA 1025] A Spy in the Metro</title>
    <link href="https://thebesttv.github.io/2019/09/15/UVA_1025_A_Spy_in_the_Metro/"/>
    <id>https://thebesttv.github.io/2019/09/15/UVA_1025_A_Spy_in_the_Metro/</id>
    <published>2019-09-15T12:15:00.000Z</published>
    <updated>2019-09-16T06:52:37.971Z</updated>
    
    <content type="html"><![CDATA[<p>哇！这是我来南理工的第一份题解 XD<br>虽然被两场比赛摧残得挺厉害，但 I’m still here, alive!</p><a id="more"></a><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>一条双向的地铁路线有 n 站，有 m1 辆车从起点出发，有 m2 辆车从终点出发。从站台 1 出发，在 T 时间要到达站台 n 。在每个站台可以等待，或乘上列车（当车恰好在此停靠时），求最小的等待时间。</p><h1 id="解题报告"><a href="#解题报告" class="headerlink" title="解题报告"></a>解题报告</h1><p>Emm 感觉这道题光DP不算难，然而还有一个坑点……</p><p>首先，只有两种可能，要么在车上，要么在车站等待。在车上是无意义的，因为它对“最小等待时间”和“到达n的时间”都没有影响，因此只需考虑在车站等待的情况。<br>“在车站”的状态需要用时间 i 和站台序号 j 表示。在任意车站都只有三种决策：继续等待一分钟（wait)、乘上向前开的车(forward)、乘上向后开的车(backward)。</p><p>那么就只需令 f[i][j] 表示在 i 时间、j 站台，想要准时到达终点的最小等待时间。如果不能到达终点，则等待时间为正无穷。为了判断在状态(i,j)是否有车，令 hasTrain[i][j][0/1] 表示当前是否有向前/向后的车，令 duration[i] 表示从站台 i 到 i+1 所需时间。根据三种决策，有：</p><p>\begin{split}<br>f(i,j) = min \{ &amp;f(i+1,j) + 1, \\<br>&amp;f( i + duration(j) , j+1), \\<br>&amp;f( i + duration(j-1), j-1) \}<br>\end{split}</p><p>转化为代码时，要注意用 INF 表示不能到达。边界条件为 f[t][n]=0，答案为 f[0][1]。</p><p>还要注意坑点：因为要求在 t 时刻到达 n ，那么超过 t 的就不算了。但在计算 hasTrain 时，有些列车的到站时间是大于 t 的，要及时停止，否则一不注意就会 RE 或者 WA 了……</p><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><p>因为时间是单向流动的，每一次计算 f[i][j] 都是利用更大的 i ，因此可以从边界条件开始根据 i 逆序递推。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">60</span>,MAXT=<span class="number">220</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,t,duration[MAX];</span><br><span class="line"><span class="keyword">int</span> m1,m2,d1[MAX],d2[MAX];</span><br><span class="line"><span class="keyword">int</span> f[MAXT][MAX];</span><br><span class="line"><span class="keyword">bool</span> hasTrain[MAXT][MAX][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span> &amp;&amp; n)&#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    MST(hasTrain,<span class="number">0</span>);  <span class="comment">// &lt;b&gt;clear all!!!&lt;/b&gt;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    FOR(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;duration[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m1); FORR(i,<span class="number">1</span>,m1) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d1[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m2); FORR(i,<span class="number">1</span>,m2) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d2[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cal arrival time</span></span><br><span class="line">    <span class="comment">// forward</span></span><br><span class="line">    FORR(i,<span class="number">1</span>,m1)&#123;</span><br><span class="line">      <span class="keyword">int</span> s=d1[i]; hasTrain[s][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      FORR(j,<span class="number">2</span>,n)&#123;</span><br><span class="line">        s+=duration[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s&gt;t) <span class="keyword">break</span>;  <span class="comment">// &lt;b&gt; &lt;/b&gt;</span></span><br><span class="line">        hasTrain[s][j][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// backward</span></span><br><span class="line">    FORR(i,<span class="number">1</span>,m2)&#123;</span><br><span class="line">      <span class="keyword">int</span> s=d2[i]; hasTrain[s][n][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">      ROR(j,n<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        s+=duration[j];</span><br><span class="line">        <span class="keyword">if</span>(s&gt;t) <span class="keyword">break</span>;  <span class="comment">// &lt;b&gt; &lt;/b&gt;</span></span><br><span class="line">        hasTrain[s][j][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="comment">// 长长一坨调试……</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"***\n"</span>);</span><br><span class="line">    FORR(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"station %d:"</span>,i);</span><br><span class="line">      FORR(j,<span class="number">0</span>,T) <span class="keyword">if</span>(hasTrain[j][i][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"***\n"</span>);</span><br><span class="line">    FORR(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"station %d:"</span>,i);</span><br><span class="line">      FORR(j,<span class="number">0</span>,T) <span class="keyword">if</span>(hasTrain[j][i][<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp</span></span><br><span class="line">    MST(f,<span class="number">0x3f</span>); f[t][n]=<span class="number">0</span>;</span><br><span class="line">    ROR(i,t<span class="number">-1</span>,<span class="number">0</span>) FORR(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">      <span class="keyword">int</span> &amp;a=f[i][j];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// wait</span></span><br><span class="line">      a = min(a,f[i+<span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// forward</span></span><br><span class="line">      <span class="keyword">if</span>(hasTrain[i][j][<span class="number">0</span>] &amp;&amp; i+duration[j]&lt;=t)&#123;</span><br><span class="line">        a = min(a, f[i+duration[j]][j+<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// backward</span></span><br><span class="line">      <span class="keyword">if</span>(hasTrain[i][j][<span class="number">1</span>] &amp;&amp; i+duration[j<span class="number">-1</span>]&lt;=t)&#123;</span><br><span class="line">        a = min(a, f[i+duration[j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case Number %d: "</span>,++kase);</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">0</span>][<span class="number">1</span>]&lt;INF) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"impossible\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化"><a href="#记忆化" class="headerlink" title="记忆化"></a>记忆化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">60</span>,MAXT=<span class="number">220</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,t,duration[MAX];</span><br><span class="line"><span class="keyword">int</span> m1,m2,d1[MAX],d2[MAX];</span><br><span class="line"><span class="keyword">int</span> f[MAXT][MAX];</span><br><span class="line"><span class="keyword">bool</span> hasTrain[MAXT][MAX][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> &amp;a=f[i][j];</span><br><span class="line">  <span class="keyword">if</span>(a!=<span class="number">-1</span>) <span class="keyword">return</span> a;</span><br><span class="line">  a=INF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;t) a = min(a, dp(i+<span class="number">1</span>,j)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// forward</span></span><br><span class="line">  <span class="keyword">if</span>(hasTrain[i][j][<span class="number">0</span>] &amp;&amp; i+duration[j]&lt;=t)&#123;</span><br><span class="line">    a = min(a, dp(i+duration[j],j+<span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// backward</span></span><br><span class="line">  <span class="keyword">if</span>(hasTrain[i][j][<span class="number">1</span>] &amp;&amp; i+duration[j<span class="number">-1</span>]&lt;=t)&#123;</span><br><span class="line">    a = min(a, dp(i+duration[j<span class="number">-1</span>],j<span class="number">-1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span> &amp;&amp; n)&#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    MST(hasTrain,<span class="number">0</span>);  <span class="comment">// &lt;b&gt;clear all!!!&lt;/b&gt;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    FOR(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;duration[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m1); FORR(i,<span class="number">1</span>,m1) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d1[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m2); FORR(i,<span class="number">1</span>,m2) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d2[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cal arrival time</span></span><br><span class="line">    <span class="comment">// forward</span></span><br><span class="line">    FORR(i,<span class="number">1</span>,m1)&#123;</span><br><span class="line">      <span class="keyword">int</span> s=d1[i]; hasTrain[s][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      FORR(j,<span class="number">2</span>,n)&#123;</span><br><span class="line">        s+=duration[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s&gt;t) <span class="keyword">break</span>;  <span class="comment">// &lt;b&gt; &lt;/b&gt;</span></span><br><span class="line">        hasTrain[s][j][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// backward</span></span><br><span class="line">    FORR(i,<span class="number">1</span>,m2)&#123;</span><br><span class="line">      <span class="keyword">int</span> s=d2[i]; hasTrain[s][n][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">      ROR(j,n<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        s+=duration[j];</span><br><span class="line">        <span class="keyword">if</span>(s&gt;t) <span class="keyword">break</span>;  <span class="comment">// &lt;b&gt; &lt;/b&gt;</span></span><br><span class="line">        hasTrain[s][j][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp</span></span><br><span class="line">    MST(f,<span class="number">-1</span>); f[t][n]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=dp(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case Number %d: "</span>,++kase);</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;INF) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"impossible\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哇！这是我来南理工的第一份题解 XD&lt;br&gt;虽然被两场比赛摧残得挺厉害，但 I’m still here, alive!&lt;/p&gt;
    
    </summary>
    
    
      <category term="DP" scheme="https://thebesttv.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下的截图大法</title>
    <link href="https://thebesttv.github.io/2019/08/23/Linux_screenshot/"/>
    <id>https://thebesttv.github.io/2019/08/23/Linux_screenshot/</id>
    <published>2019-08-23T08:58:00.000Z</published>
    <updated>2019-08-23T10:09:09.861Z</updated>
    
    <content type="html"><![CDATA[<p>看来 Linux 下想要截图还是有出路的！</p><img src="/2019/08/23/Linux_screenshot/2.png" title="效果图"><a id="more"></a><p>本来只会用一个 <code>PrintScreen</code> 键，现在发现 Linux 下原来还有不少截图工具。</p><h1 id="GUI-下截图"><a href="#GUI-下截图" class="headerlink" title="GUI 下截图"></a>GUI 下截图</h1><p>日常当然用 GUI ，Gnome 原生的 <code>gnome-screenshot</code> 不错，GitHub上的 <code>Flameshot</code> 也很方便。</p><h2 id="gnome-screenshot"><a href="#gnome-screenshot" class="headerlink" title="gnome-screenshot"></a>gnome-screenshot</h2><p>可以直接打开程序，也可指定参数。用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-screenshot [OPTION]... [-e EFFECT] [-f FILENAME]</span><br></pre></td></tr></table></figure><p>其中选项有：</p><ul><li><code>-c, --clipboard</code>: 将结果保存至剪贴板</li><li><code>-w, --window</code>: 截取当前 active window</li><li><code>-a, --area</code>: 截取特定部分</li><li><code>-d, --delay=SECONDS</code>: 延时</li><li><code>-e, --border-effect=EFFECT</code>: 边框效果（感觉只有 <code>shadow</code> 看得过去……）</li><li><code>-f FILENAME</code>: 就是保存文件名了</li></ul><p>按照习惯重新设置了一下快捷键，感觉还是很好的 hh</p><img src="/2019/08/23/Linux_screenshot/1.png" title="敲方便的快捷键"><h2 id="Flameshot"><a href="#Flameshot" class="headerlink" title="Flameshot"></a>Flameshot</h2><p>动画特效真是太帅啦！直接安装 <code>flameshot</code> 即可，用起来也很方便，基本不用靠命令行，就不说了。</p><h1 id="CMI-下截图"><a href="#CMI-下截图" class="headerlink" title="CMI 下截图"></a>CMI 下截图</h1><p>这才是比较累人的……可以用 <code>fbgrab</code> 截取图片，也可以用 <code>setterm</code> 只导出屏幕文字。<strong>注：两者都需 root 权限</strong></p><h2 id="fbgrab-amp-fbcat"><a href="#fbgrab-amp-fbcat" class="headerlink" title="fbgrab &amp; fbcat"></a>fbgrab &amp; fbcat</h2><img src="/2019/08/23/Linux_screenshot/3.png"><p>安装 <code>fbcat</code> ，就可以用 <code>fbgrab</code> 截png了。使用时需要 root 权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fbgrab [OPTION]... FILENAME</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li><code>-c N</code>: 截取 <code>/dev/ttyN</code> 的屏幕（不切换到那个tty）</li><li><code>-C N</code>: 先切换到 <code>/dev/ttyN</code> ，过几秒后截屏，再切换至原来屏幕</li></ul><p>省略 <code>-c|-C</code> 可以直接在当前终端截图，不过最后一行会留下 <code>fbgrab</code> 的命令……所以还是建议切换到其他终端再截图。</p><p><code>fbcat</code> 也可以截图，不过结果是从 stdout 输出的 PPM 格式图片，就不说了。</p><h2 id="setterm"><a href="#setterm" class="headerlink" title="setterm"></a>setterm</h2><p>这里就只介绍与截屏有关的选项了（别的不会 XD）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setterm --dump [N] [--file FILENAME]</span><br></pre></td></tr></table></figure><ul><li><code>--dump [N]</code>: 导出终端文本。默认截取当前控制台，可指定 <code>ttyN</code> 。</li><li><code>--file FILENAME</code>: 保存文件名。默认保存在当前目录的 <code>screen.dump</code> 文件中。</li></ul><p>照样要 root 权限，照样可以切换控制台防止丑丑的一行 <code>setterm</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看来 Linux 下想要截图还是有出路的！&lt;/p&gt;
&lt;img src=&quot;/2019/08/23/Linux_screenshot/2.png&quot; title=&quot;效果图&quot;&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://thebesttv.github.io/categories/Linux/"/>
    
      <category term="tools" scheme="https://thebesttv.github.io/categories/Linux/tools/"/>
    
    
      <category term="Linux" scheme="https://thebesttv.github.io/tags/Linux/"/>
    
      <category term="奇技淫巧" scheme="https://thebesttv.github.io/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Linux 奇技淫巧整理</title>
    <link href="https://thebesttv.github.io/2019/08/23/Linux_tools/"/>
    <id>https://thebesttv.github.io/2019/08/23/Linux_tools/</id>
    <published>2019-08-22T16:00:00.000Z</published>
    <updated>2019-08-23T11:17:38.321Z</updated>
    
    <content type="html"><![CDATA[<p>集合各种 Linux 的教程。</p><a id="more"></a><ul><li><a href="https://linux.cn/article-11258-1.html" target="_blank" rel="noopener">如何更改 Linux 控制台字体类型和大小</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集合各种 Linux 的教程。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://thebesttv.github.io/categories/Linux/"/>
    
      <category term="tools" scheme="https://thebesttv.github.io/categories/Linux/tools/"/>
    
    
      <category term="Linux" scheme="https://thebesttv.github.io/tags/Linux/"/>
    
      <category term="tools" scheme="https://thebesttv.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>pdftk 教程</title>
    <link href="https://thebesttv.github.io/2019/08/16/pdftk_notes/"/>
    <id>https://thebesttv.github.io/2019/08/16/pdftk_notes/</id>
    <published>2019-08-16T03:05:00.000Z</published>
    <updated>2019-08-16T06:45:55.855Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/08/16/pdftk_notes/pdftk_logo.png"><p>pdftk 是一款以页为单位的 pdf 编辑工具，可以对 pdf 进行合并、拆分、旋转、加密、解密、添加水印等。它还可以对 pdf 表格进行操作，不过在这里就不讨论了（不会 hh）</p><p>说不定大学就要用到呢 :p</p><a id="more"></a><h1 id="主要语法"><a href="#主要语法" class="headerlink" title="主要语法"></a>主要语法</h1><p>因为我目前对 pdf 的加密原理不清楚，也不清楚 user 和 owner 两个pwd的区别，这里暂时不会详细讨论 pdftk 的加密、解密功能，只会点到为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pdftk &lt;input PDF files | - | PROMPT&gt;</span><br><span class="line">     [ input_pw &lt;input PDF owner passwords | PROMPT&gt; ]</span><br><span class="line">     [ &lt;operation&gt; &lt;operation arguments&gt; ]</span><br><span class="line">     [ output &lt;output filename | - | PROMPT&gt; ]</span><br><span class="line">     [ owner_pw &lt;owner password | PROMPT&gt; ]</span><br><span class="line">     [ user_pw &lt;user password | PROMPT&gt; ]</span><br><span class="line">     [ compress | uncompress ]</span><br><span class="line">     [ verbose ] [ dont_ask | do_ask ]</span><br></pre></td></tr></table></figure><p>看起来有点吓人，其实是很好理解的：</p><ul><li><p><code>&lt;input PDF files | - | PROMPT&gt;</code>: pdftk 的第一个 option，一定要有的输入文件。<br>有三种输入方法，第一种可以 customize ，后两种只能输入一个文件。</p><ol><li><p><code>input PDF files</code>: 文件名输入。可以输入任意个数的文件，<strong>有顺序</strong>。为了之后操作，可以给每个文件设置一个 handle ，handle 必须为大写字母。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pdftk f1.pdf f2.pdf ... # 之后都以输入顺序为准</span><br><span class="line">pdftk A=f1.pdf LALALA=f2.pdf HAHAHA=f3.pdf ...</span><br><span class="line">  # 可以使用 handle 任意指定顺序</span><br></pre></td></tr></table></figure></li><li><p><code>-</code>: 从 stdin 读入一个pdf。</p></li><li><p><code>PROMPT</code>: 在启动程序后交互式输入，但只能输入一个文件。</p></li></ol></li><li><p><code>input_pw &lt;input PDF owner passwords | PROMPT&gt;</code>: 输入文件密码。<br>两种密码具有优先级，owner pwd 优先于 user pwd，即：只要设置了 owner pwd ，就一定要提供 owner pwd；否则，就只需提供 user pwd 或不提供。</p></li><li><p><code>&lt;operation&gt; &lt;operation arguments&gt;</code>: 对pdf的各种操作，有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat | shuffle | burst | rotate |</span><br><span class="line">background | multibackground |</span><br><span class="line">stamp | multistamp |</span><br><span class="line">attach_files | unpack_files</span><br></pre></td></tr></table></figure><ul><li><p><code>cat [&lt;page ranges&gt;]</code>: 用于以各种方式组合 pdf 页面。如果省略 page ranges ，就将所有 pdf 按输入顺序组合。对 <code>page ranges</code> 的讲解见下文。</p></li><li><p><code>shuffle [&lt;page ranges&gt;]</code>: 类似于 cat ，但组合的方法是按顺序从每个 page range 中分别取一页，循环往复。适合将奇数页pdf和偶数页pdf合并。</p></li><li><p><code>burst</code>: 将完整的 pdf 拆分成单页pdf。输出包含多个pdf，可以用 printf 的方式控制输出的格式（有且只有一个<code>%d</code>操作符用于标记页码，从1开始）如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pdftk range.pdf burst output page-%02d.pdf</span><br><span class="line"><span class="comment"># 输出为 page-01.pdf page-02.pdf ... page-99.pdf</span></span><br></pre></td></tr></table></figure></li><li><p><code>rotate [&lt;page ranges]</code>: 给一个pdf旋转页面。与 cat 不同的是：</p><ol><li>rotate 旋转了指定页面后，其他未指定的页面不会改变，依旧<strong>照常输出</strong>。而 cat 中没有列出的页面不会被输出。</li><li>rotate 只接受<strong>一个</strong>pdf，因此输入也只能是一个。而 cat 则接受任意多个。</li><li>page ranges 的语法于 cat 类似，但没有了 handle 。</li></ol></li><li><p><code>background &lt;background PDF filename | - | PROMPT&gt;</code>: 添加水印。<br>水印被放在源pdf图层的底层充当背景，需要所有被添加水印的pdf背景都为透明，否则水印不可见。</p></li><li><p><code>multibackground &lt;background PDF filename | - | PROMPT&gt;</code>: 一一对应水印。<br>水印文件不止一页，输出文件每一页都打上相对应的水印。如果水印页不够，剩下页面的就打上最后一面的水印。</p></li><li><p><code>stamp &lt;stamp PDF filename | - | PROMPT&gt;</code><br>类似于水印，但水印在图层顶部。可以解决源文档背景不透明的问题，但水印必须透明。</p></li><li><p><code>multistamp &lt;stamp PDF filename | - | PROMPT&gt;</code>: 一样，不说了。</p></li><li><p><code>attach_files &lt;attachment filenames | PROMPT&gt; [to_page &lt;page number | PROMPT&gt;]</code>: 附加文件。<br>向 pdf 添加任意多个外部文件，默认添加到在末尾，也可以通过 <code>to_page</code> 指定一个页面。</p></li><li><p><code>unpack_files</code>: 提取附加的文件。在此不会输出 pdf ，但可以使用 <code>output</code> 指定提取之后存放的<strong>目录</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftk ori.pdf unpack_files output ./attachments/</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>output &lt;output filename | - | PROMPT&gt;</code>: 指定输出。</p><ol><li>指定pdf文件名。除了采用 <code>burst</code> 操作会导致输出多个文件，其他的只会输出一个文件，没什么可说。</li><li>指定目录。当指定 <code>unpack_files</code> 操作时，可以指定到目标<strong>目录</strong>。</li></ol></li><li><p><code>owner_pw &lt;owner password | PROMPT&gt;</code>: 添加 owner pwd 。</p></li><li><p><code>user_pw &lt;user password | PROMPT&gt;</code>: 添加 user pwd 。<br>无论添加了 owner pwd 还是以 uwer pwd，权限默认都被取消。可以使用 <code>allow</code> 指定打开的权限，但不在本文讨论范围内 XD</p></li><li><p><code>compress</code>和<code>uncompress</code>:  是否压缩pdf。<br>如果不压缩的话，可以以纯文本形式打开 pdf 进行编辑（乱搞）。</p></li><li><p><code>verbose</code>: 输出详情。</p></li><li><p><code>do_ask</code>和<code>dont_ask</code>: 当遇到问题时，是否提示用户。<br>感觉这两个选项的行为挺模糊的……<br>反正 pdftk 默认会覆盖文件，设置 <code>do_ask</code> 可以提示，防止误伤；<code>dont_ask</code> 则像 <code>rm -f</code> 一样 XD<br>建议小心一点，经常用一下 <code>do_ask</code> 就行啦。</p></li></ul><h1 id="page-ranges-专场"><a href="#page-ranges-专场" class="headerlink" title="page ranges 专场"></a>page ranges 专场</h1><h2 id="cat下的page-range"><a href="#cat下的page-range" class="headerlink" title="cat下的page range"></a>cat下的page range</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&lt;input PDF handle&gt;][&lt;begin page number&gt;[-&lt;end page number&gt;[&lt;qualifier&gt;]]][&lt;page rotation&gt;]</span><br><span class="line"># 把它拆得友好一点：</span><br><span class="line">[&lt;input PDF handle&gt;]    # 指定 pdf 的 handle，如果有多个文件，建议使用</span><br><span class="line">  [&lt;begin page number&gt;  # 起始</span><br><span class="line">    [-&lt;end page number&gt; # 结束</span><br><span class="line">      [&lt;qualifier&gt;]     # even|odd: 指定奇数页或偶数页</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">  [&lt;page rotation&gt;]     # 旋转方向，有相对和绝对两种</span><br></pre></td></tr></table></figure><ul><li>如果省略 handle ，会使用整个 pdf 文档。单文件时没有问题，但多文件时建议使用。</li><li>如果省略开始和结尾页码，表示使用整个pdf 。</li><li>如果所有文档的开始、结尾页码都被省去，只保留 handle 则书签被保留，否则书签不被保留。有多个文件时书签会被自动修改，保证指向正确。</li><li>页码从1开始，不是阅读器里显示的<code>xv</code>,<code>iii</code>等的页码。</li><li>页码除了数字，还有<code>end</code>，表示文末</li><li>起始页码可以小于结束页码，此时为<strong>倒序读取</strong>。</li><li>对每个页码，可以用前缀<code>r</code>修饰，表示从文末开始数，相当于<code>-n</code>页。<code>r1</code>表示最后一页，<code>r1-r3</code>表示从最后一页到倒数第三页，倒序读取。</li><li><code>qualifier</code>: <code>even</code>或<code>odd</code>，用于奇数页文档和偶数页文档的合并。</li><li>旋转有相对方向 <code>left</code>, <code>right</code>, <code>down</code> ，分别表示向左转，向右转，和旋转半周；有绝对方向 <code>north</code>, <code>south</code>, <code>west</code>, <code>east</code> ，按照上北下南左西右东的方向控制角度。pdf 文档每页都有一个角度变量标志该页的方向，相对方向的旋转相当于对角度进行加减运算，绝对方向的旋转则为赋值运算。</li></ul><h2 id="其他的-page-range"><a href="#其他的-page-range" class="headerlink" title="其他的 page range"></a>其他的 page range</h2><p>cat 的 page range 可以说是最全的了，其他选项下的 page range 完全可以根据对应选项的作用适当省去一些。</p><ul><li><code>rotate</code> 下但没有 handle ，因为只有一个文件</li><li><code>shuffle</code> 只需页码范围（如果只指定一页，那么它只会在第一次被添加到输出，之后就没有了，像封面一样）</li></ul><p>就偷个懒，贴一下 man page 上的例子吧 XD</p><ul><li>Page Range Examples without Handles:<ol><li><code>1-endeast</code> - rotate entire document 90 degrees</li><li><code>5 11 20</code> - take single pages from input PDF</li><li><code>5-25oddwest</code> - take odd pages in range, rotate 90 degrees</li><li><code>6-1</code> - reverse pages in range from input PDF</li></ol></li><li>Page Range Examples Using Handles:<br><code>A=in1.pdf, B=in2.pdf</code><ol><li><code>A1-21</code> - take range from in1.pdf</li><li><code>Bend-1odd</code> - take all odd pages from in2.pdf in reverse order</li><li><code>A72</code> - take a single page from in1.pdf</li><li><code>A1-21 Beven A72</code> - assemble pages from both in1.pdf and in2.pdf</li><li><code>Awest</code> - rotate entire in1.pdf document 90 degrees</li><li><code>B</code> - use all of in2.pdf</li><li><code>A2-30evenleft</code> - take the even pages from the range, remove 90 degrees from each page’s rotation</li><li><code>A A</code> - catenate in1.pdf with in1.pdf</li><li><code>Aevenwest Aoddeast</code> - apply rotations to even pages, odd pages from in1.pdf</li><li><code>Awest Bwest Bdown</code> - catenate rotated documents</li></ol></li></ul><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pdftk Linux.pdf cat 1-10 output range.pdf</span><br><span class="line">pdftk range.pdf burst output page%02d.pdf</span><br><span class="line"></span><br><span class="line">pdftk range.pdf background bg.pdf output backgrounded.pdf</span><br><span class="line">pdftk range.pdf stamp bg.pdf output stamped.pdf</span><br><span class="line"></span><br><span class="line">pdftk range.pdf output secured.pdf owner_pw hahaha user_pw lalala</span><br><span class="line">pdftk range.pdf output owner.pdf owner_pw ownerpass</span><br><span class="line">pdftk range.pdf output user.pdf user_pw userpass</span><br><span class="line"></span><br><span class="line">pdftk secured.pdf input_pw hahaha output unlocked1.pdf</span><br><span class="line">pdftk owner.pdf input_pw ownerpass output unlocked2.pdf</span><br><span class="line">pdftk user.pdf input_pw userpass output unlocked3.pdf</span><br><span class="line"></span><br><span class="line">pdftk range.pdf  attach_files f1.rar f2.jpg f3.html output attached.pdf</span><br><span class="line">pdftk attached.pdf unpack_files output ./attachments/</span><br></pre></td></tr></table></figure><p>还有官网的<a href="https://www.pdflabs.com/docs/pdftk-cli-examples/" target="_blank" rel="noopener">栗子</a> :)</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>诶呀，总算差不多写完了！之后可能还有一些小工具的教程，算是为了未来的复习吧 hh</p><p>再过 11 天就要去南理工报道了，这段时间被某人坑了一下，还要看Python的二级教材……简直无奈。就当作复习吧。</p><img src="/2019/08/16/pdftk_notes/XD.jpg">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/08/16/pdftk_notes/pdftk_logo.png&quot;&gt;
&lt;p&gt;pdftk 是一款以页为单位的 pdf 编辑工具，可以对 pdf 进行合并、拆分、旋转、加密、解密、添加水印等。它还可以对 pdf 表格进行操作，不过在这里就不讨论了（不会 hh）&lt;/p&gt;
&lt;p&gt;说不定大学就要用到呢 :p&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://thebesttv.github.io/categories/Linux/"/>
    
      <category term="tools" scheme="https://thebesttv.github.io/categories/Linux/tools/"/>
    
    
      <category term="notes" scheme="https://thebesttv.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Bash 的 Vi 模式</title>
    <link href="https://thebesttv.github.io/2019/08/15/bash_with_vi/"/>
    <id>https://thebesttv.github.io/2019/08/15/bash_with_vi/</id>
    <published>2019-08-15T07:06:00.000Z</published>
    <updated>2019-08-15T12:16:42.684Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现 bash 有个 Vi 模式，真是太方便了！</p><a id="more"></a><p>Linux 下有一个 library call 为<code>readline</code>，是许多程序命令行下的单行编辑函数。它提供了两种模式<code>emacs</code>和<code>vi</code>，默认为<code>emacs</code>。</p><h1 id="设置-readline"><a href="#设置-readline" class="headerlink" title="设置 readline"></a>设置 readline</h1><p>可以通过文件 <code>~/.inputrc</code> 配置 readline，每条命令格式为 <code>set &lt;variable-name&gt; &lt;value&gt;</code> 的形式。这里介绍一下我用到的命令。（详情见man文档）<br>开头为 variable-name ，value有字符串，也有布尔值（<code>on/1</code>为真，<code>off/0</code>为假）。</p><ul><li><p><code>editing-mode</code>: <code>vi</code>或<code>emacs</code><br>配置 readline 所在的模式。Vi 模式类似于vim，分为<code>insert</code>和<code>command</code>模式，每次 prompt 默认处于插入模式，按下<code>ESC</code>退出为命令模式。</p></li><li><p><code>show-mode-in-prompt</code>: <code>on</code><br>在 Vi 模式下，是否在每个 prompt 开头显示当前模式，默认用<code>(ins)</code>和<code>(cmd)</code>表示两个模式。</p></li><li><p><code>vi-cmd-mode-string</code>: <code>\033[1;33mc-</code><br>配置命令模式下的模式提示符。<br>突然发现一开始确实没什么问题，但如果命令长了，在首尾跳跃多次后就会出现光标偏移的状况……也没法设置不打印字符……Anyway就暂时不设置颜色吧……<br><del>与 <code>PS1</code>, <code>PS2</code> 类似，可以接受 ANSI escape code 从而控制颜色、下划线等。不过由于它与 <code>PS1</code> 无关，bash无需计算它的字符长度，也就不需要像<code>PS1</code>中一样用<code>\[</code>和<code>\]</code>包裹 non-printing 字符，直接输入即可。在此我设置的是黄色的<code>c-</code>（看起来甚至像是暗金色hh）。</del><br>关于控制颜色的详情可以阅读 <em>The Linux Command Line</em> 一书第13章：Customizing the Prompt。</p></li><li><p><code>vi-ins-mode-string</code>: <code>\033[1;33mi-</code><br>类似，配置插入模式下的模式提示符。在此为黄色的<code>i-</code></p></li><li><p><code>bell-style</code>: <code>none</code><br>对终端响铃<code>\a</code>的反应。</p></li><li><p><code>blink-matching-paren</code>: <code>on</code><br>如果有一长串包含括号的命令，在输入右括号时会显示其对应的左括号。</p></li><li><p><code>colored-completion-prefix</code>: <code>on</code><br>把自动补全列表中的 common prefix 上色</p></li><li><p><code>colored-stats</code>: <code>on</code><br>将自动补全列表中的文件用颜色区别类型。超好玩 hh</p></li><li><p><code>completion-ignore-case</code>: <code>on</code><br>自动补全时不区分大小写。</p></li><li><p><code>enable-bracketed-paste</code>: <code>on</code><br>控制对粘贴的文本的处理，开启表示将文本当作普通的字符串，关闭表示将文本当作键盘输入。<br>看起来区别不大，但是这决定了终端是否对文本中的回车等字符作出反应。比如，有时偷个懒，直接把网上的命令复制粘贴到终端，如果一不小心复制了最后的回车，那说不定就悲剧了。开启了这一选项可以防止此类事件的发生。</p></li></ul><h1 id="Vi模式的使用"><a href="#Vi模式的使用" class="headerlink" title="Vi模式的使用"></a>Vi模式的使用</h1><p>其实……对我这样的轻度使用者，也就好了一点吧，不过心理上还是很安慰的，终于不用看到那么多快捷键了 hh</p><p>……<br>……<br>……<br>……<br>……</p><p>真的不用吗……想多了。Vi模式还是有不少快捷键的，这里提供一份 <a href="https://catonmat.net/" target="_blank" rel="noopener">CATONMAT</a> 网站的 <a href="https://catonmat.net/ftp/bash-vi-editing-mode-cheat-sheet.pdf" target="_blank" rel="noopener">Cheat Sheet</a>。</p><embed width="100%" height="512px" src="bash-vi-editing-mode-cheat-sheet.pdf" type="application/pdf" internalinstanceid="15">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然发现 bash 有个 Vi 模式，真是太方便了！&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://thebesttv.github.io/categories/Linux/"/>
    
      <category term="Bash" scheme="https://thebesttv.github.io/categories/Linux/Bash/"/>
    
    
      <category term="bash" scheme="https://thebesttv.github.io/tags/bash/"/>
    
      <category term="notes" scheme="https://thebesttv.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>V2Ray Notes</title>
    <link href="https://thebesttv.github.io/2019/08/14/v2ray_notes/"/>
    <id>https://thebesttv.github.io/2019/08/14/v2ray_notes/</id>
    <published>2019-08-14T07:43:00.000Z</published>
    <updated>2019-08-14T14:16:10.198Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个初级的 V2Ray 教程，主要为了阐明配置文件的结构，解释基本配置，并提供一个简明的模板，以便日后查阅、复习、深入。</p><a id="more"></a><h1 id="v2ray-简介"><a href="#v2ray-简介" class="headerlink" title="v2ray 简介"></a>v2ray 简介</h1><blockquote><p>Project V 是一个工具集合，它可以帮助你打造专属的基础通信网络。Project V 的核心工具称为 V2Ray ，其主要负责网络协议和功能的实现，与其它 Project V 通信。V2Ray 可以单独运行，也可以和其它工具配合，以提供简便的操作流程。</p></blockquote><p>V2Ray 是 Project V 的核心工具，主要用来代理各种流量。不像其他的 VPN 或 SS/SSR ，它没有服务器、客户端的区分。每个安装了 V2Ray 的计算机都是一个中继节点，将 inbounds 中的传入流量，根据 routing 的路由配置，发送到对应的 outbounds 中。Traditionally，在一条传送链上，位于首、尾的计算机可以看作服务器、客户端。</p><h1 id="安装、升级与日常命令"><a href="#安装、升级与日常命令" class="headerlink" title="安装、升级与日常命令"></a>安装、升级与日常命令</h1><p>Linux 下，可以直接使用官方提供的脚本来安装。<br>下载脚本，然后以管理员身份安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line">sudo bash go.sh</span><br></pre></td></tr></table></figure><p>升级时，再次运行安装程序即可。</p><p>在已有代理服务器的情况下，可以通过 <code>-p</code> 参数指定代理服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo bash go.sh -p <span class="string">"socks5://127.0.0.1:1080"</span></span><br><span class="line">sudo bash go.sh -p <span class="string">"http://127.0.0.1:8080"</span></span><br></pre></td></tr></table></figure><p>可执行文件 <code>v2ray</code> 和 <code>v2ctl</code> 位于 <code>/bin/v2ray/</code> 目录下。配置文件位于 <code>/etc/v2ray/config.json</code> ，每次更改建议先进行备份。<br>每次改变配置后，最好先检查一下配置文件的正确性，正确无误后再重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /bin/v2ray/v2ray --<span class="built_in">test</span> --config /etc/v2ray/config.json</span><br><span class="line">sudo systemctl restart v2ray</span><br></pre></td></tr></table></figure><h1 id="配置文件-rundown"><a href="#配置文件-rundown" class="headerlink" title="配置文件 rundown"></a>配置文件 rundown</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"api"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"dns"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"stats"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"policy"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"reverse"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"inbounds"</span>: [],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [],</span><br><span class="line">  <span class="attr">"transport"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个配置文件都有 10 个字段，每个字段可进一步展开成具体配置。但本文只会涉及 <code>log</code>, <code>inbounds</code>, <code>outbounds</code>, <code>routing</code> 这四个字段（其余保持默认），且只考虑 <code>客户端 -&gt; 服务器</code> 的方向。<strong>注意，最好将配置文件中默认的、不需要的配置都删除，否则可能报错无法启动。</strong></p><p><code>inbounds</code> 和 <code>outbounds</code> 都为数组，配置了多个不同的入站和出站。<code>routing</code> 为路由表，每个传入流量都会参考它。它控制着每个传入流量究竟走向何方。而 <code>log</code> 则控制本机的日志。</p><h2 id="log-字段"><a href="#log-字段" class="headerlink" title="log 字段"></a>log 字段</h2><p>先来最简单的日志吧。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"log":&#123;</span><br><span class="line">  "loglevel": "warning",</span><br><span class="line">  "access": "/var/log/v2ray/access.log",</span><br><span class="line">  "error":  "/var/log/v2ray/error.log"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>loglevel</code>: “debug” | “info” | “warning” | “error” | “none”<br>日志级别，控制日志的详细程度，从左到右由“最详细”降低到“没有日志”。<br>正常使用 <code>warning</code> 即可。</p></li><li><p><code>access</code> &amp; <code>error</code><br>日志存放地址。access 记录连接数据，error 记录程序启动、错误日志。</p></li></ul><h2 id="inbounds-amp-outbounds-字段"><a href="#inbounds-amp-outbounds-字段" class="headerlink" title="inbounds &amp; outbounds 字段"></a>inbounds &amp; outbounds 字段</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"ibounds": [&#123;</span><br><span class="line">  "port": 端口,</span><br><span class="line">  "listen": "IP",</span><br><span class="line">  "protocol": "协议名称",</span><br><span class="line">  "settings": &#123;&#125;, // 协议设置</span><br><span class="line">  "tag": "标识",</span><br><span class="line">&#125;],</span><br><span class="line">"outbounds": [&#123;</span><br><span class="line">  "protocol": "协议名称",</span><br><span class="line">  "settings": &#123;&#125;, // 协议设置</span><br><span class="line">  "tag": "标识",</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>分别配置入站和出站，拥有几个相似的字段：</p><ul><li><code>protocol</code>: 协议名称<br>入站和出站都有着不同的协议，之后会分别介绍。</li><li><code>settings</code>: 相应协议的配置</li><li><code>tag</code>: string<br>将每个入口、出口都唯一标识，以便之后在路由表中分配。</li></ul><h3 id="ibounds-字段"><a href="#ibounds-字段" class="headerlink" title="ibounds 字段"></a>ibounds 字段</h3><p>入站连接配置。对于客户端，它的入站通常为浏览器。浏览器将数据按照特定协议（HTML 或 SOCKS 5 等）打包，然后发送到本机(localhost <code>127.0.0.1</code>) 的指定监听端口。对于服务器，它的入站为客户端或上一级代理服务器，协议有 VMess，Shadowsocks 等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"ibounds": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"port"</span>: 端口,</span><br><span class="line">    <span class="attr">"listen"</span>: <span class="string">"IP"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"协议名称"</span>,</span><br><span class="line">    "settings": &#123;&#125;, // 协议设置</span><br><span class="line">    "tag": "标识",</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><code>port</code>: 监听端口（通常只有一个）</li><li><code>listen</code>: 监听地址<br>默认为 <code>&quot;0.0.0.0&quot;</code>，表示接收所有地址的连接。对于客户端，配置为 <code>&quot;127.0.0.1&quot;</code> 监听本机。对于服务器端，因为通常客户端的IP不定，所以监听所有。</li></ul><h4 id="入站协议-VMess-介绍"><a href="#入站协议-VMess-介绍" class="headerlink" title="入站协议 VMess 介绍"></a>入站协议 VMess 介绍</h4><p>对于客户端，通常都是浏览器/系统代理的 HTTP 和 SOCKS 协议，对于服务器端，则有 VMess，Shadowsocks 协议等。这里只介绍 VMess。</p><p>VMess 是 V2Ray 的加密传输协议，不使用密码，改用 UUID 加密。 VMess 要求服务器和客户端的 UTC 时间误差在90秒之内。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"settings": &#123;</span><br><span class="line">  "clients": [</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "UUID",   // 要与上一级服务器出站的 UUID 一致</span><br><span class="line">      "alterId": 16,  // 在主ID的基础上，生成额外ID的数量，必须不小于客户端</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端示例"><a href="#客户端示例" class="headerlink" title="客户端示例"></a>客户端示例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"inbounds":[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"in"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="服务器端示例"><a href="#服务器端示例" class="headerlink" title="服务器端示例"></a>服务器端示例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"inbounds": [&#123;</span><br><span class="line">  "port": 10086,</span><br><span class="line">  "protocol": "vmess",</span><br><span class="line">  "settings": &#123;</span><br><span class="line">    "clients": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"a50ad156-c206-4398-895c-54063954ca69"</span>,</span><br><span class="line">        <span class="attr">"alterId"</span>: <span class="number">16</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="outbounds-字段"><a href="#outbounds-字段" class="headerlink" title="outbounds 字段"></a>outbounds 字段</h3><p>出站连接配置。对于在海外的服务器端，通常只需一个用于直连即可。对于客户端，则需要多个：</p><ol><li>对海外网站，连接到服务器端(proxy)</li><li>对国内网站，直连(direct)</li><li>对一些 undesirable 的东西，比如广告、定位等，扔到黑洞里去(blocked) hh</li></ol><p><strong>注意，第一个出站协议为主协议，之后路由表中没被匹配的默认走主协议。</strong>所以第一个就放代理。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"outbounds": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"协议名称"</span>,</span><br><span class="line">    "settings": &#123; 协议设置 &#125;,</span><br><span class="line">    "tag": "标识",</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Emm…看上去比 <code>inbounds</code> 还简单……就直接上协议啦！</p><h4 id="出站协议介绍"><a href="#出站协议介绍" class="headerlink" title="出站协议介绍"></a>出站协议介绍</h4><p>出站协议对于客户端是最重要的，因为毕竟不会傻到把所有流量，不管国内外，都扔到服务器那儿去 XD</p><ol><li><p><code>blackhole</code>: 名副其实的黑洞，阻碍所有数据的出站。可以在设置中指定是否返回数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"settings": &#123;</span><br><span class="line">  "response": &#123;</span><br><span class="line">    "type": "none"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“type”: “none”｜”http”</p><ul><li><code>none</code>: 不返回任何数据</li><li><code>http</code>: 返回 403 错误</li></ul></li><li><p><code>freedom</code>: 直连。多用于客户端的国内网站，还有服务器端的出站</p></li><li><p><code>vmess</code>: 依旧注意时差和UUID的一致</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"settings": &#123;</span><br><span class="line">  "vnext": [</span><br><span class="line">    &#123;</span><br><span class="line">      "address": "IP",  // 下一级服务器IP</span><br><span class="line">      "port": 10086,    // 下一级服务器端口</span><br><span class="line">      "users": [</span><br><span class="line">        &#123;</span><br><span class="line">          "id": "UUID", // 注意与下一级服务器一致</span><br><span class="line">          "alterId": 16,// 不大于下一级服务器</span><br><span class="line">          "security": "auto", // 加密方法(auto即可)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="客户端示例-1"><a href="#客户端示例-1" class="headerlink" title="客户端示例"></a>客户端示例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">"outbounds": [</span><br><span class="line">  &#123;</span><br><span class="line">    "tag": "proxy", // 不要忘了各种 tag</span><br><span class="line">    "protocol": "vmess",</span><br><span class="line">    "settings": &#123; // VMess 配置</span><br><span class="line">      "vnext": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"address"</span>: <span class="string">""</span>,</span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">10086</span>,</span><br><span class="line">          <span class="attr">"users"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"id"</span>: <span class="string">"a50ad156-c206-4398-895c-54063954ca69"</span>,</span><br><span class="line">              <span class="attr">"alterId"</span>: <span class="number">16</span>,</span><br><span class="line">              <span class="attr">"security"</span>: <span class="string">"auto"</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    "tag": "direct",  // 不要忘了 x2</span><br><span class="line">    "protocol": "freedom"</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    "tag": "blocked", // 不要忘了 x3</span><br><span class="line">    "protocol": "blackhole"</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="routing-字段"><a href="#routing-字段" class="headerlink" title="routing 字段"></a>routing 字段</h2><p>终于来到最难的 routing 了！（至少我是这么认为的……）<br>有些细节我自己也不会……就放到下一次中级篇或者高级篇再详细说明吧 XD</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"routing": &#123;</span><br><span class="line">  "domainStrategy":"IPOnDemand",  // 这样写就行了……</span><br><span class="line">  "rules":[ 各种路由规则 ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><p>主要是对客户端配置，服务器端直连即可。可以指定多个规则，每个规则通过 tag 指定匹配到的流量的去向（即去到哪个 outbound）。</p><p>路由规则主要有匹配域名(domain)和匹配IP两种。每个规则只能指定两种中的一个，如果都指定，则必须都满足（即满足 domain 又满足 ip ）。不过单条规则下的 domain 或 ip 为数组，可以放置多个规则。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"rules": [</span><br><span class="line">  &#123;</span><br><span class="line">    "type": "field",  // 必须写，没什么原因 hh</span><br><span class="line">    "ip": [ ],  // 匹配IP</span><br><span class="line">    "inboundTag": [ 入站的tag ],  // 不写则默认所有</span><br><span class="line">    "outboundTag": 出站的tag（流量去向）</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    "type": "field",</span><br><span class="line">    "domain": [ ],  // 匹配域名</span><br><span class="line">    "inboundTag": [ 入站的tag ],</span><br><span class="line">    "outboundTag": 出站的tag</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下面分别看匹配域名和IP的语法。</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ol><li>纯文本：部分匹配，只需匹配域名的一部分即可，如 <code>&quot;sina.com&quot;</code> 匹配 <code>&quot;www.sina.com&quot;</code>, <code>&quot;lala-sina.com&quot;</code> 等。</li><li>正则表达式（不推荐）</li><li>子域名（推荐）：<code>&quot;domain:域名&quot;</code>，如 <code>domain:v2ray.com</code> 匹配 <code>&quot;www.v2ray.com&quot;</code>, <code>&quot;v2ray.com&quot;</code> ，但不匹配 <code>&quot;lala-v2ray.com&quot;</code>。</li><li>完整匹配：<code>&quot;full:域名&quot;</code>，必须完整匹配（注意是否有”www”）。</li><li>预定义域名列表：<code>&quot;geosite:比目鱼&quot;</code>，<code>比目鱼</code>为：<ul><li><code>category-ads</code>: 常见广告域名</li><li><code>cn</code>: 常见大陆域名（<code>geolocation-cn</code> + <code>tld-cn</code>）</li><li><code>geolocation-cn</code>: 常见国内站点域名</li><li><code>geolocation-!cn</code>: 常见非国内站点域名</li><li><code>tld-cn</code>: 所有以 .cn 和 .中国 结尾的域名</li></ul></li><li>从文件中加载域名（见官方手册吧……）</li></ol><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><ol><li>完整IP</li><li>Geoip：<code>&quot;geoip:双字符国家代码&quot;</code>，如 <code>&quot;geoip:cn&quot;</code>。还有 <code>&quot;geoip:private&quot;</code>，包含所有私有地址。</li><li>从文件中加载IP（见手册 as well）</li></ol><h3 id="客户端示例-2"><a href="#客户端示例-2" class="headerlink" title="客户端示例"></a>客户端示例</h3><p>内网和大陆直连，屏蔽广告，其余代理。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">"routing": &#123;</span><br><span class="line">  "domainStrategy":"IPOnDemand",</span><br><span class="line">  "rules":[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>:<span class="string">"field"</span>,</span><br><span class="line">      <span class="attr">"ip"</span>:[</span><br><span class="line">        <span class="string">"geoip:private"</span>,</span><br><span class="line">        <span class="string">"geoip:cn"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"outboundTag"</span>:<span class="string">"direct"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      "type": "field",</span><br><span class="line">      "domain": [</span><br><span class="line">        <span class="string">"geosite:cn"</span></span><br><span class="line">      ],</span><br><span class="line">      "outboundTag": "direct"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">      <span class="attr">"domain"</span>: [</span><br><span class="line">        <span class="string">"geosite:category-ads"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"outboundTag"</span>: <span class="string">"blackhole"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Anyway这是一个比较初级的教程，我还有很多不理解，等到理解了就有中高级了吧 hh</p><p>最后贴一下模板，所有包含 TODO 的都是要改的。</p><p>客户端</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warning"</span>,</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">    <span class="attr">"error"</span>:  <span class="string">"/var/log/v2ray/error.log"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">1080</span>,</span><br><span class="line">      <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"in"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"TODO"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: TODO,</span><br><span class="line">            <span class="attr">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"id"</span>:<span class="string">"TODO"</span>,</span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">16</span>,</span><br><span class="line">                <span class="attr">"security"</span>: <span class="string">"auto"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"direct"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"blocked"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"domainStrategy"</span>:<span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>:[</span><br><span class="line">          <span class="string">"geoip:private"</span>,</span><br><span class="line">          <span class="string">"geoip:cn"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>:<span class="string">"direct"</span></span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"domain"</span>: [</span><br><span class="line">          <span class="string">"geosite:cn"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"domain"</span>: [</span><br><span class="line">          <span class="string">"geosite:category-ads"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blackhole"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"port"</span>: TODO,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"clients"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"TODO"</span>,</span><br><span class="line">            <span class="attr">"alterId"</span>: TODO</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"rules"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [ <span class="string">"geoip:private"</span> ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://www.v2ray.com/" target="_blank" rel="noopener">V2Ray 官方文档</a> 以及文档左侧的白话文教程，还有更多。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个初级的 V2Ray 教程，主要为了阐明配置文件的结构，解释基本配置，并提供一个简明的模板，以便日后查阅、复习、深入。&lt;/p&gt;
    
    </summary>
    
      <category term="GFW" scheme="https://thebesttv.github.io/categories/GFW/"/>
    
      <category term="v2ray" scheme="https://thebesttv.github.io/categories/GFW/v2ray/"/>
    
    
      <category term="notes" scheme="https://thebesttv.github.io/tags/notes/"/>
    
      <category term="v2ray" scheme="https://thebesttv.github.io/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 笔记</title>
    <link href="https://thebesttv.github.io/2019/08/07/Hexo-notes/"/>
    <id>https://thebesttv.github.io/2019/08/07/Hexo-notes/</id>
    <published>2019-08-07T11:40:38.000Z</published>
    <updated>2019-08-15T09:00:15.796Z</updated>
    
    <content type="html"><![CDATA[<p>Emm……这是一份还没完成的 Hexo 笔记。<br>awiting 填坑，填天坑……</p><a id="more"></a><h1 id="简介-What-is-Hexo"><a href="#简介-What-is-Hexo" class="headerlink" title="简介 What is Hexo?"></a>简介 What is Hexo?</h1><blockquote><p>Hexo is a fast, simple and powerful blog framework.</p></blockquote><p>简言之，Hexo 是一个静态博客生成器，简便且快速。<br>至于什么是静态博客 TODO</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Hexo 依赖 Node.js, Git。在此建议<strong>不要使用 <code>apt</code> 的方法安装 Node.js</strong>，否则之后很多操作都会需要 root 权限，会造成很大不便。</p><ol><li><p>安装 Git （跳过）</p></li><li><p>安装 nvm (Node Version Manager)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 nvm 安装 Node.js（安装时不挂系统代理）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><p>也可先 <code>nvm ls-remote</code> 查看可用安装包，然后 <code>nvm install &lt;version&gt;</code>。</p><ol start="4"><li>使用 npm 安装 Hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="5"><li>嵌入 pdf<br>网上的 pdf tag 插件还是没用……就直接用html代码植入吧……只要把那个 <code>lalala.pdf</code> 改掉就行啦 hh<br>如果用本地pdf的话，就像插入图片一样，放到和post同名的目录下，<code>src</code> 只要输入文件名即可。<br>唯一美中不足的是，如果有印象笔记的插件，那个“保存至印象笔记”的小圈圈就会全程在网页右侧（pdf以外……），而且最无奈的是它还不能用……<br>Anyway 至少我们可以嵌入pdf啦 :D<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"512px"</span> <span class="attr">src</span>=<span class="string">"lalala.pdf"</span> <span class="attr">type</span>=<span class="string">"application/pdf"</span> <span class="attr">internalinstanceid</span>=<span class="string">"15"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><p>此时文档结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   # Hexo 配置文件</span><br><span class="line">├── node_modules  # 模块 ???</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── scaffolds     # 文章模板</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source        # 主要博客内容</span><br><span class="line">│   └── _posts    # 文章</span><br><span class="line">└── themes        # Hexo 主题</span><br><span class="line">    └── landscape</span><br></pre></td></tr></table></figure><h1 id="插件-amp-配置"><a href="#插件-amp-配置" class="headerlink" title="插件&amp;配置"></a>插件&amp;配置</h1><ol><li><p>RSS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>部署到 GitHub Pages<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ol><p>配置 <code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;GitHub Pages repo 地址&gt;</span><br><span class="line">  # repo: git@github.com:thebesttv/thebesttv.github.io.git</span><br><span class="line">    # 使用 ssh 的方式避免每次输入用户名和密码</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 NexT 主题<br>进入博客根目录，安装 NexT<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ol><p>将 Hexo 配置文件的 theme 改为 NexT<br>清空缓存 <code>hexo clean</code></p><p>next/_config.yml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces # Menci 同款 hh</span><br><span class="line">avatar # 头像</span><br></pre></td></tr></table></figure><ol start="4"><li>新建页面</li></ol><p>对于 NexT 主题中的 Tags, Categories, About, 404 等页面的创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;page name&gt;</span><br></pre></td></tr></table></figure><p>TODO</p><h1 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h1><h2 id="新建post"><a href="#新建post" class="headerlink" title="新建post"></a>新建post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># layout 即为 scaffolds 目录下的模板，默认有 post / draft / page</span></span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><code>hexo g; hexo d</code> 或 <code>hexo g -d</code> 或 <code>hexo d -g</code></p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="有层次的category："><a href="#有层次的category：" class="headerlink" title="有层次的category："></a>有层次的category：</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>[Sports, Baseball]</span><br><span class="line"><span class="bullet">- </span>[MLB, American League, Boston Red Sox]</span><br><span class="line"><span class="bullet">- </span>[MLB, American League, New York Yankees]</span><br><span class="line"><span class="bullet">- </span>Rivalries</span><br></pre></td></tr></table></figure><h2 id="Tag-Plugins-标签插件："><a href="#Tag-Plugins-标签插件：" class="headerlink" title="Tag Plugins 标签插件："></a>Tag Plugins 标签插件：</h2><h1 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h1><ol><li>Chrome 浏览器强制刷新<br>每次 deploy 之后像个傻子一样各种按<code>F5</code>然并卵，后来才想到要强制刷新……<br>Linux 下使用 <code>Shift</code>+<code>F5</code> 即可 hh</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emm……这是一份还没完成的 Hexo 笔记。&lt;br&gt;awiting 填坑，填天坑……&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="https://thebesttv.github.io/tags/Notes/"/>
    
      <category term="Hexo" scheme="https://thebesttv.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
